{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(python -c \"\nimport os\n\n# Read the backup file\nwith open(''guiv2/src/renderer/store/useMigrationStore.ts.backup'', ''r'', encoding=''utf-8'') as f:\n    print(''Backup file exists and is readable'')\n    print(f''Backup file size: {os.path.getsize(\"\"guiv2/src/renderer/store/useMigrationStore.ts.backup\"\")} bytes'')\n\")",
      "Bash(npx tsc:*)",
      "Bash(npm:*)",
      "Bash(npm prune:*)",
      "Bash(if [ -d \"guiv2\" ])",
      "Bash(then echo \"guiv2 exists\")",
      "Bash(else echo \"guiv2 does NOT exist\")",
      "Bash(for file in \"src/main/services/configService.ts\" \"src/main/services/credentialService.ts\" \"src/main/services/fileService.ts\")",
      "Bash(do [ ! -f \"$file\" ])",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(for file in \"src/renderer/hooks/useUsersViewLogic.ts\")",
      "Bash(comm:*)",
      "Bash(awk:*)",
      "Bash(for:*)",
      "Bash(head:*)",
      "Bash(then echo \"✅ guiv2 directory exists\")",
      "Bash(else echo \"❌ guiv2 directory does NOT exist\")",
      "Bash(fi)",
      "Bash(xargs -I {} bash -c 'echo \"\"\"\"=== {} ===\"\"\"\" && head -30 {}')",
      "Bash(test:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(wc:*)",
      "Bash(powershell:*)",
      "Bash(cat:*)",
      "Bash(timeout 60 npm start)",
      "Bash(dir:*)",
      "Bash(pwsh:*)",
      "Bash(npx eslint:*)",
      "Bash(grep:*)",
      "Bash(tee:*)",
      "Bash(cut:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(node:*)",
      "Bash(npx madge:*)",
      "Bash(FORCE_COLOR=0 npm run package)",
      "Bash(cross-env FORCE_COLOR=0 npm run package)",
      "Bash(set FORCE_COLOR=0)",
      "Bash(npx webpack:*)",
      "Bash(Select-String -Pattern \"OK|FAILED|ERROR|WARNING|Build\")",
      "Bash(Select-Object -First 80)",
      "Bash(timeout 30 npm start)",
      "Bash(pkill:*)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(taskkill:*)",
      "Bash(do sed -i 's/columns={columns}/columns={columns as any}/g' \"$file\")",
      "Bash(Tee-Object -FilePath \"D:\\Scripts\\UserMandA\\build-log.txt\")",
      "mcp__ide__getDiagnostics",
      "Bash(copy:*)",
      "Bash(cmd /c copy:*)",
      "Bash(cmd /c:*)",
      "Bash(Select-String \"SecurityAppliancesView\")",
      "Bash(Select-Object -First 5)",
      "Bash(Copy-Item \"D:\\Scripts\\UserMandA\\guiv2\\src\\renderer\\views\\infrastructure\\EndpointDevicesView.tsx\" \"C:\\enterprisediscovery\\guiv2\\src\\renderer\\views\\infrastructure\\EndpointDevicesView.tsx\" -Force)",
      "Bash(Copy-Item \"D:\\Scripts\\UserMandA\\guiv2\\src\\renderer\\views\\infrastructure\\MonitoringSystemsView.tsx\" \"C:\\enterprisediscovery\\guiv2\\src\\renderer\\views\\infrastructure\\MonitoringSystemsView.tsx\" -Force)",
      "Bash(Copy-Item \"D:\\Scripts\\UserMandA\\guiv2\\src\\renderer\\views\\infrastructure\\NetworkDevicesView.tsx\" \"C:\\enterprisediscovery\\guiv2\\src\\renderer\\views\\infrastructure\\NetworkDevicesView.tsx\" -Force)",
      "Bash(Copy-Item \"D:\\Scripts\\UserMandA\\guiv2\\src\\renderer\\views\\infrastructure\\NetworkTopologyView.tsx\" \"C:\\enterprisediscovery\\guiv2\\src\\renderer\\views\\infrastructure\\NetworkTopologyView.tsx\" -Force)",
      "Bash(Copy-Item \"D:\\Scripts\\UserMandA\\guiv2\\src\\renderer\\views\\infrastructure\\SecurityAppliancesView.tsx\" \"C:\\enterprisediscovery\\guiv2\\src\\renderer\\views\\infrastructure\\SecurityAppliancesView.tsx\" -Force)",
      "Bash(Copy-Item \"D:\\Scripts\\UserMandA\\guiv2\\src\\renderer\\views\\infrastructure\\StorageAnalysisView.tsx\" \"C:\\enterprisediscovery\\guiv2\\src\\renderer\\views\\infrastructure\\StorageAnalysisView.tsx\" -Force)",
      "Bash(Copy-Item \"D:\\Scripts\\UserMandA\\guiv2\\src\\renderer\\views\\infrastructure\\VirtualizationView.tsx\" \"C:\\enterprisediscovery\\guiv2\\src\\renderer\\views\\infrastructure\\VirtualizationView.tsx\" -Force)",
      "Bash(Copy-Item \"D:\\Scripts\\UserMandA\\guiv2\\src\\renderer\\views\\infrastructure\\WebServersView.tsx\" \"C:\\enterprisediscovery\\guiv2\\src\\renderer\\views\\infrastructure\\WebServersView.tsx\" -Force)",
      "Bash(Select-String -Pattern 'Source|Target|Profile|ComboBox' -Context 0,2)",
      "Bash(Select-Object -First 20)",
      "Bash(do if [ -f \"$view\" ])",
      "Bash(! grep -q \"export default\" \"$view\")",
      "Bash(then echo \"Fixing: $view\")",
      "Bash(robocopy:*)",
      "Bash(timeout 90 npm start)",
      "Bash(Select-String \"ERROR|✔ Packaging|✔ Making\")",
      "Bash(Select-Object -First 100)",
      "Bash(powershell.exe:*)",
      "Bash(tasklist)",
      "Bash(Select-String \"Building|Packaging|✔|✖|ERROR\")",
      "Bash(Select-Object -First 50)",
      "Bash(timeout 120 npm run package)",
      "Bash(timeout 120 npm start)",
      "Bash(start ./guiv2.exe)",
      "Bash(tasklist:*)",
      "Bash(Select-String -Pattern \"(OK|FAILED|ERROR|WARNING|Build|Package|Completed)\")"
    ],
    "deny": [],
    "ask": [],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "C:\\enterprisediscovery",
      "D:\\d\\Scripts\\UserMandA-1",
      "C:\\discoverydata\\ljpops\\Raw",
      "C:\\discoverydata\\ljpops\\Logs",
      "D:\\d D:\\Scripts\\UserMandA",
      "C:\\EnterpriseDiscovery",
      "D:\\d\\Scripts",
      "D:\\c\\enterprisediscovery",
      "D:\\c\\discoverydata\\ljpops",
      "C:\\",
      "D:\\c\\DiscoveryData\\ljpops\\Logs",
      "D:\\",
      "D:\\d\\Scripts\\UserMandA\\GUI",
      "D:\\c\\EnterpriseDiscovery",
      "D:\\c"
    ]
  }
}
