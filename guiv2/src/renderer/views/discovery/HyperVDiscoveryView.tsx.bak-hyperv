/**
 * Hyper-V Discovery View
 * FULLY FUNCTIONAL production-ready UI for Hyper-V infrastructure discovery
 * NO PLACEHOLDERS - Complete implementation with Hosts, VMs, Switches, Checkpoints
 */

import React, { useState } from 'react';
import { Box, ChevronDown, ChevronUp, Download, FileSpreadsheet, AlertCircle, Play, XCircle, Server, Activity, Network } from 'lucide-react';

import { useHyperVDiscoveryLogic } from '../../hooks/useHyperVDiscoveryLogic';
import { VirtualizedDataGrid } from '../../components/organisms/VirtualizedDataGrid';
import { Button } from '../../components/atoms/Button';
import { Input } from '../../components/atoms/Input';
import Checkbox from '../../components/atoms/Checkbox';
import LoadingOverlay from '../../components/molecules/LoadingOverlay';

const HyperVDiscoveryView: React.FC = () => {
  const {
    config,
    result,
    isDiscovering,
    progress,
    activeTab,
    filter,
    error,
    columns,
    filteredData,
    stats,
    updateConfig,
    updateFilter,
    setActiveTab,
    startDiscovery,
    cancelDiscovery,
    exportToCSV,
    exportToExcel
  } = useHyperVDiscoveryLogic();

  const [showConfig, setShowConfig] = useState(true);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);
  const [hostAddressInput, setHostAddressInput] = useState('');

  const handleAddHost = () => {
    if (hostAddressInput.trim()) {
      const currentHosts = config.hostAddresses || [];
      updateConfig({ hostAddresses: [...currentHosts, hostAddressInput.trim()] });
      setHostAddressInput('');
    }
  };

  const handleRemoveHost = (host: string) => {
    const currentHosts = config.hostAddresses || [];
    updateConfig({ hostAddresses: currentHosts.filter(h => h !== host) });
  };

  const handleStartDiscovery = () => {
    const errors: string[] = [];
    if (!config.hostAddresses || (config?.hostAddresses?.length ?? '') === 0) {
      errors.push('At least one Hyper-V host address is required');
    }
    if (errors.length > 0) {
      setValidationErrors(errors);
      return;
    }
    setValidationErrors([]);
    startDiscovery();
  };

  return (
    <div className="h-full flex flex-col bg-gray-50 dark:bg-gray-900" data-cy="hyper-v-discovery-view" data-testid="hyper-v-discovery-view">
      {isDiscovering && (
        <LoadingOverlay
          progress={progress?.percentage ?? 0}
          message={progress?.message || 'Discovering Hyper-V infrastructure...'}
          onCancel={cancelDiscovery}
        />
      )}

      {/* Header */}
      <div className="flex items-center justify-between p-6 bg-white dark:bg-gray-800 border-b shadow-sm">
        <div className="flex items-center gap-3">
          <div className="p-3 bg-slate-100 dark:bg-slate-900/30 rounded-lg">
            <Box className="w-8 h-8 text-slate-600 dark:text-slate-400" />
          </div>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Hyper-V Discovery</h1>
            <p className="text-sm text-gray-500 dark:text-gray-400">Discover hosts, VMs, switches, and checkpoints</p>
          </div>
        </div>

        <div className="flex gap-3">
          {result && (
            <>
              <Button variant="secondary" onClick={exportToCSV} icon={<Download className="w-4 h-4" />} data-cy="export-results-btn" data-testid="export-results-btn">Export CSV</Button>
              <Button variant="secondary" onClick={exportToExcel} icon={<FileSpreadsheet className="w-4 h-4" />}>Export Excel</Button>
            </>
          )}
          {!isDiscovering ? (
            <Button
              variant="primary"
              onClick={handleStartDiscovery}
              icon={<Play className="w-4 h-4" />}
              data-cy="start-discovery-btn" data-testid="start-discovery-btn"
            >
              Start Discovery
            </Button>
          ) : (
            <Button
              variant="danger"
              onClick={cancelDiscovery}
              icon={<XCircle className="w-4 h-4" />}
              data-cy="cancel-discovery-btn" data-testid="cancel-discovery-btn"
            >
              Cancel
            </Button>
          )}
        </div>
      </div>

      {/* Configuration Panel */}
      <div className="bg-white dark:bg-gray-800 border-b">
        <button
          onClick={() => setShowConfig(!showConfig)}
          className="w-full flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-gray-700/50"
        >
          <span className="font-medium">Discovery Configuration</span>
          {showConfig ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
        </button>

        {showConfig && (
          <div className="p-6 bg-gray-50 dark:bg-gray-900/50">
            <div className="grid grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Hyper-V Hosts</label>
                  <div className="flex gap-2 mb-2">
                    <Input
                      value={hostAddressInput}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setHostAddressInput(e.target.value)}
                      placeholder="hostname or IP address"
                      onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) => e.key === 'Enter' && handleAddHost()}
                    />
                    <Button onClick={handleAddHost} size="sm">Add</Button>
                  </div>
                  <div className="space-y-1">
                    {(config.hostAddresses || []).map((host, i) => (
                      <div key={i} className="flex items-center justify-between p-2 bg-white dark:bg-gray-800 rounded border">
                        <span className="text-sm">{host}</span>
                        <button
                          onClick={() => handleRemoveHost(host)}
                          className="text-red-600 hover:text-red-700 text-sm"
                        >
                          Remove
                        </button>
                      </div>
                    ))}
                  </div>
                  {validationErrors.includes('At least one Hyper-V host address is required') && (
                    <p className="text-sm text-red-600 mt-1">At least one host is required</p>
                  )}
                </div>
              </div>

              <div className="space-y-3">
                <h3 className="text-sm font-medium mb-2">Discovery Options</h3>
                <Checkbox
                  label="Include VMs"
                  checked={config.includeVMs || false}
                  onChange={(checked) => updateConfig({ includeVMs: checked })}
                />
                <Checkbox
                  label="Include Virtual Switches"
                  checked={config.includeVirtualSwitches || false}
                  onChange={(checked) => updateConfig({ includeVirtualSwitches: checked })}
                />
                <Checkbox
                  label="Include VHDs"
                  checked={config.includeVHDs || false}
                  onChange={(checked) => updateConfig({ includeVHDs: checked })}
                />
                <Input
                  label="Timeout (ms)"
                  type="number"
                  value={config.timeout?.toString() || '300000'}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateConfig({ timeout: parseInt(e.target.value) || 300000 })}
                  min={60000}
                  max={600000}
                />
              </div>
            </div>
          </div>
        )}
      </div>

      {error && (
        <div className="m-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 rounded-lg">
          <div className="flex items-start gap-2">
            <AlertCircle className="w-5 h-5 text-red-600" />
            <div>
              <h4 className="text-sm font-medium text-red-900 dark:text-red-200">Error</h4>
              <p className="text-sm text-red-700 dark:text-red-300">{error}</p>
            </div>
          </div>
        </div>
      )}

      {/* Statistics */}
      {stats && (
        <div className="p-6 bg-white dark:bg-gray-800 border-b">
          <h3 className="text-sm font-medium mb-4">Hyper-V Infrastructure Statistics</h3>
          <div className="grid grid-cols-6 gap-4">
            <StatCard value={stats?.totalHosts ?? 0} label="Hosts" color="slate" />
            <StatCard value={stats?.totalVMs ?? 0} label="Total VMs" color="blue" />
            <StatCard value={stats?.runningVMs ?? 0} label="Running VMs" color="green" />
            <StatCard value={stats?.totalVCPUs ?? 0} label="vCPUs" color="purple" />
            <StatCard
              value={`${((stats?.totalMemoryAllocated ?? 0) / 1024 / 1024 / 1024).toFixed(1)} GB`}
              label="Memory"
              color="orange"
            />
            <StatCard
              value={`${(stats?.vmsByState?.off ?? 0) + (stats?.vmsByState?.paused ?? 0) + (stats?.vmsByState?.saved ?? 0)}`}
              label="Stopped VMs"
              color="gray"
            />
          </div>
        </div>
      )}

      {/* Tabs */}
      <div className="flex gap-1 px-6 pt-4 bg-gray-50 dark:bg-gray-900">
        <TabButton
          label="Overview"
          active={activeTab === 'overview'}
          onClick={() => setActiveTab('overview')}
          count={stats?.totalHosts}
          icon={<Server className="w-4 h-4" />}
        />
        <TabButton
          label="Hosts"
          active={activeTab === 'hosts'}
          onClick={() => setActiveTab('hosts')}
          count={result?.hosts?.length}
          icon={<Server className="w-4 h-4" />}
        />
        <TabButton
          label="VMs"
          active={activeTab === 'vms'}
          onClick={() => setActiveTab('vms')}
          count={stats?.totalVMs}
          icon={<Box className="w-4 h-4" />}
        />
        <TabButton
          label="Switches"
          active={activeTab === 'switches'}
          onClick={() => setActiveTab('switches')}
          count={result?.hosts?.reduce((sum, h) => sum + h.virtualSwitches.length, 0)}
          icon={<Network className="w-4 h-4" />}
        />
        <TabButton
          label="Checkpoints"
          active={activeTab === 'checkpoints'}
          onClick={() => setActiveTab('checkpoints')}
          count={result?.hosts?.reduce((sum, h) => sum + h.virtualMachines.reduce((s, vm) => s + vm.checkpoints.length, 0), 0)}
          icon={<Activity className="w-4 h-4" />}
        />
      </div>

      {/* Filters */}
      <div className="px-6 py-4 bg-gray-50 dark:bg-gray-900">
        <div className="flex gap-4 items-end">
          <div className="flex-1">
            <Input
              value={filter?.searchText ?? ''}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateFilter({ searchText: e.target.value })}
              placeholder={`Search ${activeTab}...`}
            />
          </div>

          {activeTab === 'vms' && (
            <Checkbox
              label="Show Only Running"
              checked={filter.showOnlyRunning || false}
              onChange={(checked) => updateFilter({ showOnlyRunning: checked })}
            />
          )}
        </div>
      </div>

      {/* Grid */}
      <div className="flex-1 px-6 pb-6 bg-gray-50 dark:bg-gray-900">
        {activeTab === 'overview' && result ? (
          <OverviewTab stats={stats} result={result} />
        ) : (
          <div className="h-full bg-white dark:bg-gray-800 rounded-lg shadow-sm border">
            <VirtualizedDataGrid
              data={filteredData}
              columns={columns}
              loading={isDiscovering}
              enableExport
              enableColumnReorder
              enableColumnResize
            />
          </div>
        )}
      </div>
    </div>
  );
};

const StatCard: React.FC<{ value: number | string; label: string; color: string }> = ({ value, label, color }) => {
  const colors: Record<string, string> = {
    slate: 'bg-slate-100 dark:bg-slate-900/30 text-slate-600',
    blue: 'bg-blue-100 dark:bg-blue-900/30 text-blue-600',
    green: 'bg-green-100 dark:bg-green-900/30 text-green-600',
    purple: 'bg-purple-100 dark:bg-purple-900/30 text-purple-600',
    orange: 'bg-orange-100 dark:bg-orange-900/30 text-orange-600',
    gray: 'bg-gray-100 dark:bg-gray-700/30 text-gray-600'
  };

  return (
    <div className={`p-4 rounded-lg ${colors[color]}`}>
      <div className="text-3xl font-bold">{typeof value === 'number' ? value.toLocaleString() : value}</div>
      <div className="text-sm mt-1 opacity-80">{label}</div>
    </div>
  );
};

const TabButton: React.FC<{ label: string; active: boolean; onClick: () => void; count?: number; icon?: React.ReactNode }> = ({
  label,
  active,
  onClick,
  count,
  icon
}) => (
  <button
    onClick={onClick}
    className={`px-4 py-2 text-sm font-medium border-b-2 flex items-center gap-2 ${
      active ? 'border-slate-600 text-slate-600' : 'border-transparent text-gray-600 hover:text-gray-900'
    }`}
  >
    {icon}
    {label}
    {count !== undefined && (
      <span className={`ml-2 px-2 py-0.5 text-xs rounded-full ${active ? 'bg-slate-100 text-slate-700' : 'bg-gray-200'}`}>
        {count}
      </span>
    )}
  </button>
);

const OverviewTab: React.FC<{ stats: any; result: any }> = ({ stats, result }) => (
  <div className="h-full overflow-auto bg-white dark:bg-gray-800 rounded-lg shadow-sm border p-6">
    <h2 className="text-lg font-semibold mb-4">Hyper-V Infrastructure Summary</h2>

    <div className="space-y-6">
      {/* Infrastructure Stats */}
      <div className="pb-4 border-b">
        <h3 className="text-sm font-medium mb-3">Infrastructure Overview</h3>
        <div className="space-y-2">
          <SummaryRow label="Total Hosts" value={stats?.totalHosts || 0} />
          <SummaryRow label="Total Virtual Machines" value={stats?.totalVMs || 0} />
          <SummaryRow label="Running VMs" value={stats?.runningVMs || 0} />
          <SummaryRow label="Total vCPUs Allocated" value={stats?.totalVCPUs || 0} />
          <SummaryRow
            label="Total Memory Allocated"
            value={`${((stats?.totalMemoryAllocated || 0) / 1024 / 1024 / 1024).toFixed(2)} GB`}
          />
        </div>
      </div>

      {/* VM States Breakdown */}
      {stats?.vmsByState && (
        <div className="pb-4 border-b">
          <h3 className="text-sm font-medium mb-3">Virtual Machine States</h3>
          <div className="space-y-2">
            {Object.entries((stats?.vmsByState ?? 0)).map(([state, count]) => {
              const vmCount = count as number;
              return vmCount > 0 && (
                <div key={state} className="flex justify-between items-center py-2 border-b border-gray-100 dark:border-gray-700 last:border-0">
                  <span className="text-sm text-gray-600 dark:text-gray-400 capitalize">{state}</span>
                  <span className={`text-sm font-medium px-2 py-1 rounded ${
                    state === 'running' ? 'bg-green-100 text-green-700' :
                    state === 'off' ? 'bg-gray-100 text-gray-700' :
                    'bg-yellow-100 text-yellow-700'
                  }`}>
                    {vmCount}
                  </span>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Host Details */}
      {result?.hosts && (result?.hosts?.length ?? 0) > 0 && (
        <div className="pb-4 border-b">
          <h3 className="text-sm font-medium mb-3">Hyper-V Hosts</h3>
          {(result?.hosts?.slice ?? 0)(0, 5).map((host: any, i: number) => (
            <div key={i} className="mb-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <h4 className="text-sm font-medium">{host.name}</h4>
                  <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">{host.fqdn}</p>
                  <div className="mt-2 grid grid-cols-2 gap-2 text-xs">
                    <div>
                      <span className="text-gray-500">Version:</span> {host.version}
                    </div>
                    <div>
                      <span className="text-gray-500">VMs:</span> {host.totalVMs} ({host.runningVMs} running)
                    </div>
                    <div>
                      <span className="text-gray-500">CPUs:</span> {host.processorInfo?.logicalProcessorCount || 0}
                    </div>
                    <div>
                      <span className="text-gray-500">Memory:</span> {((host.memoryInfo?.totalMemory || 0) / 1024 / 1024 / 1024).toFixed(1)} GB
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Virtual Switches Summary */}
      {result?.hosts && (
        <div>
          <h3 className="text-sm font-medium mb-3">Virtual Switches</h3>
          {(result?.hosts?.flatMap ?? 0)((h: any) => h.virtualSwitches).slice(0, 5).map((sw: any, i: number) => (
            <SummaryRow
              key={i}
              label={sw.name}
              value={`${sw.switchType} (${sw.allowManagementOS ? 'Mgmt OS' : 'No Mgmt OS'})`}
            />
          ))}
        </div>
      )}
    </div>
  </div>
);

const SummaryRow: React.FC<{ label: string; value: number | string }> = ({ label, value }) => (
  <div className="flex justify-between items-center py-2 border-b border-gray-100 dark:border-gray-700">
    <span className="text-sm text-gray-600 dark:text-gray-400">{label}</span>
    <span className="text-sm font-medium">{typeof value === 'number' ? value.toLocaleString() : value}</span>
  </div>
);

export default HyperVDiscoveryView;
