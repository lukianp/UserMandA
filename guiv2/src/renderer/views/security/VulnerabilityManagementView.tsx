/**
 * Vulnerability Management View
 * Displays vulnerability scanning results, CVE tracking, and remediation status
 */

import React from 'react';
import { useVulnerabilityManagementLogic } from '../../hooks/security/useVulnerabilityManagementLogic';
import { VirtualizedDataGrid } from '../../components/organisms/VirtualizedDataGrid';
import { Button } from '../../components/atoms/Button';
import { Input } from '../../components/atoms/Input';
import { Select } from '../../components/atoms/Select';
import { Badge } from '../../components/atoms/Badge';
import { Shield, RefreshCw, Download, Filter, X, AlertTriangle, CheckCircle, AlertCircle } from 'lucide-react';

const VulnerabilityManagementView: React.FC = () => {
  const {
    data,
    columns: baseColumns,
    stats,
    isLoading,
    error,
    filters,
    filterOptions,
    updateFilter,
    clearFilters,
    selectedVulnerabilities,
    setSelectedVulnerabilities,
    loadData,
    exportData,
    selectedProfile,
  } = useVulnerabilityManagementLogic();

  const getSeverityBadgeVariant = (severity: string): 'default' | 'success' | 'warning' | 'danger' => {
    switch (severity) {
      case 'Critical':
        return 'danger';
      case 'High':
        return 'danger';
      case 'Medium':
        return 'warning';
      case 'Low':
        return 'success';
      default:
        return 'default';
    }
  };

  const getStatusBadgeVariant = (status: string): 'default' | 'success' | 'warning' | 'danger' => {
    switch (status) {
      case 'Resolved':
        return 'success';
      case 'In Progress':
        return 'warning';
      case 'Open':
        return 'danger';
      case 'Accepted Risk':
        return 'default';
      default:
        return 'default';
    }
  };

  // Enhance columns with custom renderers
  const columns = baseColumns.map(col => {
    if (col.field === 'severity') {
      return {
        ...col,
        render: (value: string) => (
          <Badge variant={getSeverityBadgeVariant(value)}>
            {value}
          </Badge>
        )
      };
    }
    if (col.field === 'status') {
      return {
        ...col,
        render: (value: string) => (
          <Badge variant={getStatusBadgeVariant(value)}>
            {value}
          </Badge>
        )
      };
    }
    if (col.field === 'patchAvailable') {
      return {
        ...col,
        render: (value: boolean) => (
          <span className={value ? 'text-success' : 'text-muted-foreground'}>
            {value ? 'Yes' : 'No'}
          </span>
        )
      };
    }
    if (col.field === 'exploitAvailable') {
      return {
        ...col,
        render: (value: boolean) => (
          <span className={value ? 'text-danger font-semibold' : 'text-muted-foreground'}>
            {value ? 'Yes' : 'No'}
          </span>
        )
      };
    }
    if (col.field === 'cvssScore') {
      return {
        ...col,
        render: (value: number) => (
          <span className={`font-semibold ${
            value >= 9.0 ? 'text-danger' :
            value >= 7.0 ? 'text-orange-600' :
            value >= 4.0 ? 'text-warning' : 'text-success'
          }`}>
            {value.toFixed(1)}
          </span>
        )
      };
    }
    return col;
  });

  return (
    <div className="h-full flex flex-col bg-gray-50 dark:bg-gray-900" data-cy="vulnerability-management-view">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Shield className="w-8 h-8 text-red-600 dark:text-red-400" />
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Vulnerability Management</h1>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Track and remediate security vulnerabilities across your environment
              </p>
            </div>
          </div>
          {selectedProfile && (
            <div className="text-sm text-gray-600 dark:text-gray-400">
              Profile: <span className="font-semibold">{selectedProfile.name}</span>
            </div>
          )}
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-sm text-blue-600 dark:text-blue-400 font-medium">Total Vulnerabilities</div>
                <div className="text-2xl font-bold text-blue-900 dark:text-blue-100">{stats.total}</div>
              </div>
              <Shield className="w-8 h-8 text-blue-600 dark:text-blue-400 opacity-50" />
            </div>
          </div>

          <div className="bg-red-50 dark:bg-red-900/20 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-sm text-red-600 dark:text-red-400 font-medium">Critical</div>
                <div className="text-2xl font-bold text-red-900 dark:text-red-100">{stats.critical}</div>
              </div>
              <AlertTriangle className="w-8 h-8 text-red-600 dark:text-red-400 opacity-50" />
            </div>
            {stats.critical > 0 && (
              <div className="mt-2 text-xs text-red-600 dark:text-red-400 font-semibold">Immediate attention required</div>
            )}
          </div>

          <div className="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-sm text-orange-600 dark:text-orange-400 font-medium">High Severity</div>
                <div className="text-2xl font-bold text-orange-900 dark:text-orange-100">{stats.high}</div>
              </div>
              <AlertCircle className="w-8 h-8 text-orange-600 dark:text-orange-400 opacity-50" />
            </div>
          </div>

          <div className="bg-green-50 dark:bg-green-900/20 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-sm text-green-600 dark:text-green-400 font-medium">Patches Available</div>
                <div className="text-2xl font-bold text-green-900 dark:text-green-100">{stats.patchesAvailable}</div>
              </div>
              <CheckCircle className="w-8 h-8 text-green-600 dark:text-green-400 opacity-50" />
            </div>
          </div>

          <div className="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-sm text-purple-600 dark:text-purple-400 font-medium">Active Exploits</div>
                <div className="text-2xl font-bold text-purple-900 dark:text-purple-100">{stats.activeExploits}</div>
              </div>
              <AlertTriangle className="w-8 h-8 text-purple-600 dark:text-purple-400 opacity-50" />
            </div>
            {stats.activeExploits > 0 && (
              <div className="mt-2 text-xs text-purple-600 dark:text-purple-400 font-semibold">High priority</div>
            )}
          </div>
        </div>
      </div>

      {/* Alert Banners */}
      {(stats.critical > 0 || stats.activeExploits > 0 || stats.overdue > 0) && (
        <div className="px-6 py-4 space-y-2">
          {stats.critical > 0 && (
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 px-4 py-3 rounded flex items-center">
              <AlertTriangle className="w-5 h-5 mr-3 flex-shrink-0" />
              <div>
                <strong>{stats.critical}</strong> critical vulnerabilities require immediate attention
              </div>
            </div>
          )}
          {stats.activeExploits > 0 && (
            <div className="bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 text-purple-800 dark:text-purple-200 px-4 py-3 rounded flex items-center">
              <AlertTriangle className="w-5 h-5 mr-3 flex-shrink-0" />
              <div>
                <strong>{stats.activeExploits}</strong> vulnerabilities have active exploits in the wild
              </div>
            </div>
          )}
          {stats.overdue > 0 && (
            <div className="bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 text-orange-800 dark:text-orange-200 px-4 py-3 rounded flex items-center">
              <AlertCircle className="w-5 h-5 mr-3 flex-shrink-0" />
              <div>
                <strong>{stats.overdue}</strong> vulnerabilities past their remediation due date
              </div>
            </div>
          )}
        </div>
      )}

      {/* Filters */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
        <div className="flex items-center gap-3 mb-3">
          <Filter className="w-5 h-5 text-gray-600 dark:text-gray-400" />
          <h3 className="font-semibold text-gray-900 dark:text-white">Filters</h3>
          {(filters.searchText || filters.severity || filters.status || filters.category || filters.patchAvailable || filters.exploitAvailable) && (
            <Button
              variant="ghost"
              size="sm"
              icon={<X className="w-4 h-4" />}
              onClick={clearFilters}
              data-cy="clear-filters-btn"
            >
              Clear All
            </Button>
          )}
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-3">
          <Input
            placeholder="Search CVE or title..."
            value={filters.searchText}
            onChange={(e) => updateFilter('searchText', e.target.value)}
            className="md:col-span-2"
            data-cy="search-input"
          />
          <Select
            value={filters.severity}
            onChange={(value) => updateFilter('severity', value)}
            options={[
              { value: '', label: 'All Severities' },
              ...filterOptions.severities.map(sev => ({ value: sev, label: sev }))
            ]}
            data-cy="severity-select"
          />
          <Select
            value={filters.status}
            onChange={(value) => updateFilter('status', value)}
            options={[
              { value: '', label: 'All Statuses' },
              ...filterOptions.statuses.map(st => ({ value: st, label: st }))
            ]}
            data-cy="status-select"
          />
          <Select
            value={filters.patchAvailable}
            onChange={(value) => updateFilter('patchAvailable', value)}
            options={[
              { value: '', label: 'All Patches' },
              { value: 'Yes', label: 'Patch Available' },
              { value: 'No', label: 'No Patch' }
            ]}
            data-cy="patch-select"
          />
          <Select
            value={filters.exploitAvailable}
            onChange={(value) => updateFilter('exploitAvailable', value)}
            options={[
              { value: '', label: 'All Exploits' },
              { value: 'Yes', label: 'Active Exploit' },
              { value: 'No', label: 'No Exploit' }
            ]}
            data-cy="exploit-select"
          />
        </div>
      </div>

      {/* Actions Bar */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Button
              variant="primary"
              icon={<RefreshCw className="w-4 h-4" />}
              onClick={loadData}
              loading={isLoading}
              data-cy="refresh-btn"
            >
              Refresh
            </Button>
            {selectedVulnerabilities.length > 0 && (
              <div className="text-sm text-gray-600 dark:text-gray-400">
                {selectedVulnerabilities.length} selected
              </div>
            )}
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="secondary"
              icon={<Download className="w-4 h-4" />}
              onClick={() => exportData('csv')}
              disabled={data.length === 0}
              data-cy="export-csv-btn"
            >
              Export CSV
            </Button>
            <Button
              variant="secondary"
              icon={<Download className="w-4 h-4" />}
              onClick={() => exportData('json')}
              disabled={data.length === 0}
              data-cy="export-json-btn"
            >
              Export JSON
            </Button>
          </div>
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="mx-6 mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md">
          <p className="text-sm text-red-800 dark:text-red-200">{error}</p>
        </div>
      )}

      {/* Data Grid */}
      <div className="flex-1 overflow-hidden p-6">
        <VirtualizedDataGrid
          data={data}
          columns={columns}
          loading={isLoading}
          enableSelection={true}
          selectionMode="multiple"
          onSelectionChange={setSelectedVulnerabilities}
          enableExport={true}
          enableFiltering={true}
          height="calc(100vh - 650px)"
          data-cy="vulnerability-grid"
        />
      </div>
    </div>
  );
};

export default VulnerabilityManagementView;
