/* eslint-env node */
module.exports = {
  preset: 'ts-jest/presets/js-with-babel',
  testEnvironment: 'jsdom',
  setupFiles: ['<rootDir>/src/test-utils/polyfills.js'],
  setupFilesAfterEnv: ['<rootDir>/src/test-utils/setupTests.ts'],

  // CRITICAL: More restrictive test matching
  testMatch: [
    '<rootDir>/src/renderer/**/*.(test|spec).(ts|tsx)',
    '<rootDir>/src/main/**/*.(test|spec).(ts|tsx)',
    '<rootDir>/src/shared/**/*.(test|spec).(ts|tsx)'
  ],

  // CRITICAL: Proper TypeScript + JSX transformation
  transform: {
    '^.+\\.(ts|tsx)$': ['ts-jest', {
      useESM: false,
      tsconfig: {
        jsx: 'react-jsx',
        module: 'commonjs',
        target: 'es2020',
        esModuleInterop: true,
        allowSyntheticDefaultImports: true,
        lib: ['es2020', 'dom']
      }
    }],
    '^.+\\.(js|jsx)$': ['babel-jest', {
      presets: [
        ['@babel/preset-env', { targets: { node: 'current' }, modules: 'commonjs' }],
        ['@babel/preset-react', { runtime: 'automatic' }]
      ]
    }]
  },

  transformIgnorePatterns: [
    'node_modules/(?!(@react-dnd|react-dnd|dnd-core|@dnd-kit|react-dnd-html5-backend|react-router|react-router-dom|@remix-run|framer-motion|zustand)/)',
  ],

  moduleDirectories: ['node_modules', '<rootDir>/src'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/renderer/$1',
    '^@components/(.*)$': '<rootDir>/src/renderer/components/$1',
    '^@views/(.*)$': '<rootDir>/src/renderer/views/$1',
    '^@hooks/(.*)$': '<rootDir>/src/renderer/hooks/$1',
    '^@store/(.*)$': '<rootDir>/src/renderer/store/$1',
    '^@services/(.*)$': '<rootDir>/src/renderer/services/$1',
    '^@types/(.*)$': '<rootDir>/src/renderer/types/$1',
    '^@lib/(.*)$': '<rootDir>/src/renderer/lib/$1',
    '^src/(.*)$': '<rootDir>/src/$1',
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '\\.(jpg|jpeg|png|gif|svg)$': '<rootDir>/src/test-utils/fileMock.js',
  },

  // CRITICAL: Strict test exclusions
  testPathIgnorePatterns: [
    '/node_modules/',
    '/build/',
    '/dist/',
    '/.webpack/',
    '/tests/',
    '/e2e/',
    '/playwright/'
  ],
  // Remove coverage threshold for now since we have too many failures
  coverageThreshold: {},

  collectCoverageFrom: [
    'src/renderer/**/*.{ts,tsx}',
    'src/main/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/test-utils/**',
    '!src/**/*.test.{ts,tsx}',
    '!src/**/*.spec.{ts,tsx}',
    '!src/renderer/index.tsx',
    '!src/main/index.ts',
  ],

  coverageDirectory: 'coverage',
  verbose: true,
  maxWorkers: '50%',
  testTimeout: 15000,
  clearMocks: true,
  resetMocks: false,
  restoreMocks: true,
};
