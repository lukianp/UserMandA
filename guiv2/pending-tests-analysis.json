{
  "total": 459,
  "fileCount": 21,
  "files": [
    {
      "file": "views/advanced/DataClassificationView.test.tsx",
      "count": 24,
      "tests": [
        "DataClassificationView Rendering renders without crashing",
        "DataClassificationView Rendering displays the view title",
        "DataClassificationView Rendering displays the view description",
        "DataClassificationView Rendering displays the icon",
        "DataClassificationView Rendering has proper heading structure",
        "DataClassificationView Loading State shows loading state when data is loading",
        "DataClassificationView Loading State does not show loading state when data is loaded",
        "DataClassificationView Data Display displays data when loaded",
        "DataClassificationView Data Display shows empty state when no data",
        "DataClassificationView Search and Filtering renders search input",
        "DataClassificationView Search and Filtering handles search input changes",
        "DataClassificationView Button Actions renders action buttons",
        "DataClassificationView Button Actions calls exportData when export button clicked",
        "DataClassificationView Button Actions calls refreshData when refresh button clicked",
        "DataClassificationView Button Actions disables export button when no data",
        "DataClassificationView Item Selection allows selecting items",
        "DataClassificationView Item Selection displays selected count when items are selected",
        "DataClassificationView Error Handling displays error message when error occurs",
        "DataClassificationView Error Handling does not display error when no error",
        "DataClassificationView Error Handling shows error alert with proper styling",
        "DataClassificationView Accessibility has accessible data-cy attributes",
        "DataClassificationView Accessibility has accessible button labels",
        "DataClassificationView Accessibility has accessible form labels",
        "DataClassificationView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/LicenseOptimizationView.test.tsx",
      "count": 24,
      "tests": [
        "LicenseOptimizationView Rendering renders without crashing",
        "LicenseOptimizationView Rendering displays the view title",
        "LicenseOptimizationView Rendering displays the view description",
        "LicenseOptimizationView Rendering displays the icon",
        "LicenseOptimizationView Rendering has proper heading structure",
        "LicenseOptimizationView Loading State shows loading state when data is loading",
        "LicenseOptimizationView Loading State does not show loading state when data is loaded",
        "LicenseOptimizationView Data Display displays data when loaded",
        "LicenseOptimizationView Data Display shows empty state when no data",
        "LicenseOptimizationView Search and Filtering renders search input",
        "LicenseOptimizationView Search and Filtering handles search input changes",
        "LicenseOptimizationView Button Actions renders action buttons",
        "LicenseOptimizationView Button Actions calls exportData when export button clicked",
        "LicenseOptimizationView Button Actions calls refreshData when refresh button clicked",
        "LicenseOptimizationView Button Actions disables export button when no data",
        "LicenseOptimizationView Item Selection allows selecting items",
        "LicenseOptimizationView Item Selection displays selected count when items are selected",
        "LicenseOptimizationView Error Handling displays error message when error occurs",
        "LicenseOptimizationView Error Handling does not display error when no error",
        "LicenseOptimizationView Error Handling shows error alert with proper styling",
        "LicenseOptimizationView Accessibility has accessible data-cy attributes",
        "LicenseOptimizationView Accessibility has accessible button labels",
        "LicenseOptimizationView Accessibility has accessible form labels",
        "LicenseOptimizationView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/ResourceOptimizationView.test.tsx",
      "count": 24,
      "tests": [
        "ResourceOptimizationView Rendering renders without crashing",
        "ResourceOptimizationView Rendering displays the view title",
        "ResourceOptimizationView Rendering displays the view description",
        "ResourceOptimizationView Rendering displays the icon",
        "ResourceOptimizationView Rendering has proper heading structure",
        "ResourceOptimizationView Loading State shows loading state when data is loading",
        "ResourceOptimizationView Loading State does not show loading state when data is loaded",
        "ResourceOptimizationView Data Display displays data when loaded",
        "ResourceOptimizationView Data Display shows empty state when no data",
        "ResourceOptimizationView Search and Filtering renders search input",
        "ResourceOptimizationView Search and Filtering handles search input changes",
        "ResourceOptimizationView Button Actions renders action buttons",
        "ResourceOptimizationView Button Actions calls exportData when export button clicked",
        "ResourceOptimizationView Button Actions calls refreshData when refresh button clicked",
        "ResourceOptimizationView Button Actions disables export button when no data",
        "ResourceOptimizationView Item Selection allows selecting items",
        "ResourceOptimizationView Item Selection displays selected count when items are selected",
        "ResourceOptimizationView Error Handling displays error message when error occurs",
        "ResourceOptimizationView Error Handling does not display error when no error",
        "ResourceOptimizationView Error Handling shows error alert with proper styling",
        "ResourceOptimizationView Accessibility has accessible data-cy attributes",
        "ResourceOptimizationView Accessibility has accessible button labels",
        "ResourceOptimizationView Accessibility has accessible form labels",
        "ResourceOptimizationView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/HardwareRefreshPlanningView.test.tsx",
      "count": 24,
      "tests": [
        "HardwareRefreshPlanningView Rendering renders without crashing",
        "HardwareRefreshPlanningView Rendering displays the view title",
        "HardwareRefreshPlanningView Rendering displays the view description",
        "HardwareRefreshPlanningView Rendering displays the icon",
        "HardwareRefreshPlanningView Rendering has proper heading structure",
        "HardwareRefreshPlanningView Loading State shows loading state when data is loading",
        "HardwareRefreshPlanningView Loading State does not show loading state when data is loaded",
        "HardwareRefreshPlanningView Data Display displays data when loaded",
        "HardwareRefreshPlanningView Data Display shows empty state when no data",
        "HardwareRefreshPlanningView Search and Filtering renders search input",
        "HardwareRefreshPlanningView Search and Filtering handles search input changes",
        "HardwareRefreshPlanningView Button Actions renders action buttons",
        "HardwareRefreshPlanningView Button Actions calls exportData when export button clicked",
        "HardwareRefreshPlanningView Button Actions calls refreshData when refresh button clicked",
        "HardwareRefreshPlanningView Button Actions disables export button when no data",
        "HardwareRefreshPlanningView Item Selection allows selecting items",
        "HardwareRefreshPlanningView Item Selection displays selected count when items are selected",
        "HardwareRefreshPlanningView Error Handling displays error message when error occurs",
        "HardwareRefreshPlanningView Error Handling does not display error when no error",
        "HardwareRefreshPlanningView Error Handling shows error alert with proper styling",
        "HardwareRefreshPlanningView Accessibility has accessible data-cy attributes",
        "HardwareRefreshPlanningView Accessibility has accessible button labels",
        "HardwareRefreshPlanningView Accessibility has accessible form labels",
        "HardwareRefreshPlanningView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/DataImportExportView.test.tsx",
      "count": 24,
      "tests": [
        "DataImportExportView Rendering renders without crashing",
        "DataImportExportView Rendering displays the view title",
        "DataImportExportView Rendering displays the view description",
        "DataImportExportView Rendering displays the icon",
        "DataImportExportView Rendering has proper heading structure",
        "DataImportExportView Loading State shows loading state when data is loading",
        "DataImportExportView Loading State does not show loading state when data is loaded",
        "DataImportExportView Data Display displays data when loaded",
        "DataImportExportView Data Display shows empty state when no data",
        "DataImportExportView Search and Filtering renders search input",
        "DataImportExportView Search and Filtering handles search input changes",
        "DataImportExportView Button Actions renders action buttons",
        "DataImportExportView Button Actions calls exportData when export button clicked",
        "DataImportExportView Button Actions calls refreshData when refresh button clicked",
        "DataImportExportView Button Actions disables export button when no data",
        "DataImportExportView Item Selection allows selecting items",
        "DataImportExportView Item Selection displays selected count when items are selected",
        "DataImportExportView Error Handling displays error message when error occurs",
        "DataImportExportView Error Handling does not display error when no error",
        "DataImportExportView Error Handling shows error alert with proper styling",
        "DataImportExportView Accessibility has accessible data-cy attributes",
        "DataImportExportView Accessibility has accessible button labels",
        "DataImportExportView Accessibility has accessible form labels",
        "DataImportExportView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/DisasterRecoveryView.test.tsx",
      "count": 24,
      "tests": [
        "DisasterRecoveryView Rendering renders without crashing",
        "DisasterRecoveryView Rendering displays the view title",
        "DisasterRecoveryView Rendering displays the view description",
        "DisasterRecoveryView Rendering displays the icon",
        "DisasterRecoveryView Rendering has proper heading structure",
        "DisasterRecoveryView Loading State shows loading state when data is loading",
        "DisasterRecoveryView Loading State does not show loading state when data is loaded",
        "DisasterRecoveryView Data Display displays data when loaded",
        "DisasterRecoveryView Data Display shows empty state when no data",
        "DisasterRecoveryView Search and Filtering renders search input",
        "DisasterRecoveryView Search and Filtering handles search input changes",
        "DisasterRecoveryView Button Actions renders action buttons",
        "DisasterRecoveryView Button Actions calls exportData when export button clicked",
        "DisasterRecoveryView Button Actions calls refreshData when refresh button clicked",
        "DisasterRecoveryView Button Actions disables export button when no data",
        "DisasterRecoveryView Item Selection allows selecting items",
        "DisasterRecoveryView Item Selection displays selected count when items are selected",
        "DisasterRecoveryView Error Handling displays error message when error occurs",
        "DisasterRecoveryView Error Handling does not display error when no error",
        "DisasterRecoveryView Error Handling shows error alert with proper styling",
        "DisasterRecoveryView Accessibility has accessible data-cy attributes",
        "DisasterRecoveryView Accessibility has accessible button labels",
        "DisasterRecoveryView Accessibility has accessible form labels",
        "DisasterRecoveryView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/SSOConfigurationView.test.tsx",
      "count": 24,
      "tests": [
        "SSOConfigurationView Rendering renders without crashing",
        "SSOConfigurationView Rendering displays the view title",
        "SSOConfigurationView Rendering displays the view description",
        "SSOConfigurationView Rendering displays the icon",
        "SSOConfigurationView Rendering has proper heading structure",
        "SSOConfigurationView Loading State shows loading state when data is loading",
        "SSOConfigurationView Loading State does not show loading state when data is loaded",
        "SSOConfigurationView Data Display displays data when loaded",
        "SSOConfigurationView Data Display shows empty state when no data",
        "SSOConfigurationView Search and Filtering renders search input",
        "SSOConfigurationView Search and Filtering handles search input changes",
        "SSOConfigurationView Button Actions renders action buttons",
        "SSOConfigurationView Button Actions calls exportData when export button clicked",
        "SSOConfigurationView Button Actions calls refreshData when refresh button clicked",
        "SSOConfigurationView Button Actions disables export button when no data",
        "SSOConfigurationView Item Selection allows selecting items",
        "SSOConfigurationView Item Selection displays selected count when items are selected",
        "SSOConfigurationView Error Handling displays error message when error occurs",
        "SSOConfigurationView Error Handling does not display error when no error",
        "SSOConfigurationView Error Handling shows error alert with proper styling",
        "SSOConfigurationView Accessibility has accessible data-cy attributes",
        "SSOConfigurationView Accessibility has accessible button labels",
        "SSOConfigurationView Accessibility has accessible form labels",
        "SSOConfigurationView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/DataGovernanceView.test.tsx",
      "count": 24,
      "tests": [
        "DataGovernanceView Rendering renders without crashing",
        "DataGovernanceView Rendering displays the view title",
        "DataGovernanceView Rendering displays the view description",
        "DataGovernanceView Rendering displays the icon",
        "DataGovernanceView Rendering has proper heading structure",
        "DataGovernanceView Loading State shows loading state when data is loading",
        "DataGovernanceView Loading State does not show loading state when data is loaded",
        "DataGovernanceView Data Display displays data when loaded",
        "DataGovernanceView Data Display shows empty state when no data",
        "DataGovernanceView Search and Filtering renders search input",
        "DataGovernanceView Search and Filtering handles search input changes",
        "DataGovernanceView Button Actions renders action buttons",
        "DataGovernanceView Button Actions calls exportData when export button clicked",
        "DataGovernanceView Button Actions calls refreshData when refresh button clicked",
        "DataGovernanceView Button Actions disables export button when no data",
        "DataGovernanceView Item Selection allows selecting items",
        "DataGovernanceView Item Selection displays selected count when items are selected",
        "DataGovernanceView Error Handling displays error message when error occurs",
        "DataGovernanceView Error Handling does not display error when no error",
        "DataGovernanceView Error Handling shows error alert with proper styling",
        "DataGovernanceView Accessibility has accessible data-cy attributes",
        "DataGovernanceView Accessibility has accessible button labels",
        "DataGovernanceView Accessibility has accessible form labels",
        "DataGovernanceView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/PerformanceDashboardView.test.tsx",
      "count": 24,
      "tests": [
        "PerformanceDashboardView Rendering renders without crashing",
        "PerformanceDashboardView Rendering displays the view title",
        "PerformanceDashboardView Rendering displays the view description",
        "PerformanceDashboardView Rendering displays the icon",
        "PerformanceDashboardView Rendering has proper heading structure",
        "PerformanceDashboardView Loading State shows loading state when data is loading",
        "PerformanceDashboardView Loading State does not show loading state when data is loaded",
        "PerformanceDashboardView Data Display displays data when loaded",
        "PerformanceDashboardView Data Display shows empty state when no data",
        "PerformanceDashboardView Search and Filtering renders search input",
        "PerformanceDashboardView Search and Filtering handles search input changes",
        "PerformanceDashboardView Button Actions renders action buttons",
        "PerformanceDashboardView Button Actions calls exportData when export button clicked",
        "PerformanceDashboardView Button Actions calls refreshData when refresh button clicked",
        "PerformanceDashboardView Button Actions disables export button when no data",
        "PerformanceDashboardView Item Selection allows selecting items",
        "PerformanceDashboardView Item Selection displays selected count when items are selected",
        "PerformanceDashboardView Error Handling displays error message when error occurs",
        "PerformanceDashboardView Error Handling does not display error when no error",
        "PerformanceDashboardView Error Handling shows error alert with proper styling",
        "PerformanceDashboardView Accessibility has accessible data-cy attributes",
        "PerformanceDashboardView Accessibility has accessible button labels",
        "PerformanceDashboardView Accessibility has accessible form labels",
        "PerformanceDashboardView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/HealthMonitoringView.test.tsx",
      "count": 24,
      "tests": [
        "HealthMonitoringView Rendering renders without crashing",
        "HealthMonitoringView Rendering displays the view title",
        "HealthMonitoringView Rendering displays the view description",
        "HealthMonitoringView Rendering displays the icon",
        "HealthMonitoringView Rendering has proper heading structure",
        "HealthMonitoringView Loading State shows loading state when data is loading",
        "HealthMonitoringView Loading State does not show loading state when data is loaded",
        "HealthMonitoringView Data Display displays data when loaded",
        "HealthMonitoringView Data Display shows empty state when no data",
        "HealthMonitoringView Search and Filtering renders search input",
        "HealthMonitoringView Search and Filtering handles search input changes",
        "HealthMonitoringView Button Actions renders action buttons",
        "HealthMonitoringView Button Actions calls exportData when export button clicked",
        "HealthMonitoringView Button Actions calls refreshData when refresh button clicked",
        "HealthMonitoringView Button Actions disables export button when no data",
        "HealthMonitoringView Item Selection allows selecting items",
        "HealthMonitoringView Item Selection displays selected count when items are selected",
        "HealthMonitoringView Error Handling displays error message when error occurs",
        "HealthMonitoringView Error Handling does not display error when no error",
        "HealthMonitoringView Error Handling shows error alert with proper styling",
        "HealthMonitoringView Accessibility has accessible data-cy attributes",
        "HealthMonitoringView Accessibility has accessible button labels",
        "HealthMonitoringView Accessibility has accessible form labels",
        "HealthMonitoringView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/IncidentResponseView.test.tsx",
      "count": 24,
      "tests": [
        "IncidentResponseView Rendering renders without crashing",
        "IncidentResponseView Rendering displays the view title",
        "IncidentResponseView Rendering displays the view description",
        "IncidentResponseView Rendering displays the icon",
        "IncidentResponseView Rendering has proper heading structure",
        "IncidentResponseView Loading State shows loading state when data is loading",
        "IncidentResponseView Loading State does not show loading state when data is loaded",
        "IncidentResponseView Data Display displays data when loaded",
        "IncidentResponseView Data Display shows empty state when no data",
        "IncidentResponseView Search and Filtering renders search input",
        "IncidentResponseView Search and Filtering handles search input changes",
        "IncidentResponseView Button Actions renders action buttons",
        "IncidentResponseView Button Actions calls exportData when export button clicked",
        "IncidentResponseView Button Actions calls refreshData when refresh button clicked",
        "IncidentResponseView Button Actions disables export button when no data",
        "IncidentResponseView Item Selection allows selecting items",
        "IncidentResponseView Item Selection displays selected count when items are selected",
        "IncidentResponseView Error Handling displays error message when error occurs",
        "IncidentResponseView Error Handling does not display error when no error",
        "IncidentResponseView Error Handling shows error alert with proper styling",
        "IncidentResponseView Accessibility has accessible data-cy attributes",
        "IncidentResponseView Accessibility has accessible button labels",
        "IncidentResponseView Accessibility has accessible form labels",
        "IncidentResponseView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/ServiceCatalogView.test.tsx",
      "count": 24,
      "tests": [
        "ServiceCatalogView Rendering renders without crashing",
        "ServiceCatalogView Rendering displays the view title",
        "ServiceCatalogView Rendering displays the view description",
        "ServiceCatalogView Rendering displays the icon",
        "ServiceCatalogView Rendering has proper heading structure",
        "ServiceCatalogView Loading State shows loading state when data is loading",
        "ServiceCatalogView Loading State does not show loading state when data is loaded",
        "ServiceCatalogView Data Display displays data when loaded",
        "ServiceCatalogView Data Display shows empty state when no data",
        "ServiceCatalogView Search and Filtering renders search input",
        "ServiceCatalogView Search and Filtering handles search input changes",
        "ServiceCatalogView Button Actions renders action buttons",
        "ServiceCatalogView Button Actions calls exportData when export button clicked",
        "ServiceCatalogView Button Actions calls refreshData when refresh button clicked",
        "ServiceCatalogView Button Actions disables export button when no data",
        "ServiceCatalogView Item Selection allows selecting items",
        "ServiceCatalogView Item Selection displays selected count when items are selected",
        "ServiceCatalogView Error Handling displays error message when error occurs",
        "ServiceCatalogView Error Handling does not display error when no error",
        "ServiceCatalogView Error Handling shows error alert with proper styling",
        "ServiceCatalogView Accessibility has accessible data-cy attributes",
        "ServiceCatalogView Accessibility has accessible button labels",
        "ServiceCatalogView Accessibility has accessible form labels",
        "ServiceCatalogView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/eDiscoveryView.test.tsx",
      "count": 24,
      "tests": [
        "EDiscoveryView Rendering renders without crashing",
        "EDiscoveryView Rendering displays the view title",
        "EDiscoveryView Rendering displays the view description",
        "EDiscoveryView Rendering displays the icon",
        "EDiscoveryView Rendering has proper heading structure",
        "EDiscoveryView Loading State shows loading state when data is loading",
        "EDiscoveryView Loading State does not show loading state when data is loaded",
        "EDiscoveryView Data Display displays data when loaded",
        "EDiscoveryView Data Display shows empty state when no data",
        "EDiscoveryView Search and Filtering renders search input",
        "EDiscoveryView Search and Filtering handles search input changes",
        "EDiscoveryView Button Actions renders action buttons",
        "EDiscoveryView Button Actions calls exportData when export button clicked",
        "EDiscoveryView Button Actions calls refreshData when refresh button clicked",
        "EDiscoveryView Button Actions disables export button when no data",
        "EDiscoveryView Item Selection allows selecting items",
        "EDiscoveryView Item Selection displays selected count when items are selected",
        "EDiscoveryView Error Handling displays error message when error occurs",
        "EDiscoveryView Error Handling does not display error when no error",
        "EDiscoveryView Error Handling shows error alert with proper styling",
        "EDiscoveryView Accessibility has accessible data-cy attributes",
        "EDiscoveryView Accessibility has accessible button labels",
        "EDiscoveryView Accessibility has accessible form labels",
        "EDiscoveryView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/HybridIdentityView.test.tsx",
      "count": 24,
      "tests": [
        "HybridIdentityView Rendering renders without crashing",
        "HybridIdentityView Rendering displays the view title",
        "HybridIdentityView Rendering displays the view description",
        "HybridIdentityView Rendering displays the icon",
        "HybridIdentityView Rendering has proper heading structure",
        "HybridIdentityView Loading State shows loading state when data is loading",
        "HybridIdentityView Loading State does not show loading state when data is loaded",
        "HybridIdentityView Data Display displays data when loaded",
        "HybridIdentityView Data Display shows empty state when no data",
        "HybridIdentityView Search and Filtering renders search input",
        "HybridIdentityView Search and Filtering handles search input changes",
        "HybridIdentityView Button Actions renders action buttons",
        "HybridIdentityView Button Actions calls exportData when export button clicked",
        "HybridIdentityView Button Actions calls refreshData when refresh button clicked",
        "HybridIdentityView Button Actions disables export button when no data",
        "HybridIdentityView Item Selection allows selecting items",
        "HybridIdentityView Item Selection displays selected count when items are selected",
        "HybridIdentityView Error Handling displays error message when error occurs",
        "HybridIdentityView Error Handling does not display error when no error",
        "HybridIdentityView Error Handling shows error alert with proper styling",
        "HybridIdentityView Accessibility has accessible data-cy attributes",
        "HybridIdentityView Accessibility has accessible button labels",
        "HybridIdentityView Accessibility has accessible form labels",
        "HybridIdentityView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/DiagnosticsView.test.tsx",
      "count": 24,
      "tests": [
        "DiagnosticsView Rendering renders without crashing",
        "DiagnosticsView Rendering displays the view title",
        "DiagnosticsView Rendering displays the view description",
        "DiagnosticsView Rendering displays the icon",
        "DiagnosticsView Rendering has proper heading structure",
        "DiagnosticsView Loading State shows loading state when data is loading",
        "DiagnosticsView Loading State does not show loading state when data is loaded",
        "DiagnosticsView Data Display displays data when loaded",
        "DiagnosticsView Data Display shows empty state when no data",
        "DiagnosticsView Search and Filtering renders search input",
        "DiagnosticsView Search and Filtering handles search input changes",
        "DiagnosticsView Button Actions renders action buttons",
        "DiagnosticsView Button Actions calls exportData when export button clicked",
        "DiagnosticsView Button Actions calls refreshData when refresh button clicked",
        "DiagnosticsView Button Actions disables export button when no data",
        "DiagnosticsView Item Selection allows selecting items",
        "DiagnosticsView Item Selection displays selected count when items are selected",
        "DiagnosticsView Error Handling displays error message when error occurs",
        "DiagnosticsView Error Handling does not display error when no error",
        "DiagnosticsView Error Handling shows error alert with proper styling",
        "DiagnosticsView Accessibility has accessible data-cy attributes",
        "DiagnosticsView Accessibility has accessible button labels",
        "DiagnosticsView Accessibility has accessible form labels",
        "DiagnosticsView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/TagManagementView.test.tsx",
      "count": 24,
      "tests": [
        "TagManagementView Rendering renders without crashing",
        "TagManagementView Rendering displays the view title",
        "TagManagementView Rendering displays the view description",
        "TagManagementView Rendering displays the icon",
        "TagManagementView Rendering has proper heading structure",
        "TagManagementView Loading State shows loading state when data is loading",
        "TagManagementView Loading State does not show loading state when data is loaded",
        "TagManagementView Data Display displays data when loaded",
        "TagManagementView Data Display shows empty state when no data",
        "TagManagementView Search and Filtering renders search input",
        "TagManagementView Search and Filtering handles search input changes",
        "TagManagementView Button Actions renders action buttons",
        "TagManagementView Button Actions calls exportData when export button clicked",
        "TagManagementView Button Actions calls refreshData when refresh button clicked",
        "TagManagementView Button Actions disables export button when no data",
        "TagManagementView Item Selection allows selecting items",
        "TagManagementView Item Selection displays selected count when items are selected",
        "TagManagementView Error Handling displays error message when error occurs",
        "TagManagementView Error Handling does not display error when no error",
        "TagManagementView Error Handling shows error alert with proper styling",
        "TagManagementView Accessibility has accessible data-cy attributes",
        "TagManagementView Accessibility has accessible button labels",
        "TagManagementView Accessibility has accessible form labels",
        "TagManagementView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/MFAManagementView.test.tsx",
      "count": 24,
      "tests": [
        "MFAManagementView Rendering renders without crashing",
        "MFAManagementView Rendering displays the view title",
        "MFAManagementView Rendering displays the view description",
        "MFAManagementView Rendering displays the icon",
        "MFAManagementView Rendering has proper heading structure",
        "MFAManagementView Loading State shows loading state when data is loading",
        "MFAManagementView Loading State does not show loading state when data is loaded",
        "MFAManagementView Data Display displays data when loaded",
        "MFAManagementView Data Display shows empty state when no data",
        "MFAManagementView Search and Filtering renders search input",
        "MFAManagementView Search and Filtering handles search input changes",
        "MFAManagementView Button Actions renders action buttons",
        "MFAManagementView Button Actions calls exportData when export button clicked",
        "MFAManagementView Button Actions calls refreshData when refresh button clicked",
        "MFAManagementView Button Actions disables export button when no data",
        "MFAManagementView Item Selection allows selecting items",
        "MFAManagementView Item Selection displays selected count when items are selected",
        "MFAManagementView Error Handling displays error message when error occurs",
        "MFAManagementView Error Handling does not display error when no error",
        "MFAManagementView Error Handling shows error alert with proper styling",
        "MFAManagementView Accessibility has accessible data-cy attributes",
        "MFAManagementView Accessibility has accessible button labels",
        "MFAManagementView Accessibility has accessible form labels",
        "MFAManagementView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/TicketingSystemView.test.tsx",
      "count": 24,
      "tests": [
        "TicketingSystemView Rendering renders without crashing",
        "TicketingSystemView Rendering displays the view title",
        "TicketingSystemView Rendering displays the view description",
        "TicketingSystemView Rendering displays the icon",
        "TicketingSystemView Rendering has proper heading structure",
        "TicketingSystemView Loading State shows loading state when data is loading",
        "TicketingSystemView Loading State does not show loading state when data is loaded",
        "TicketingSystemView Data Display displays data when loaded",
        "TicketingSystemView Data Display shows empty state when no data",
        "TicketingSystemView Search and Filtering renders search input",
        "TicketingSystemView Search and Filtering handles search input changes",
        "TicketingSystemView Button Actions renders action buttons",
        "TicketingSystemView Button Actions calls exportData when export button clicked",
        "TicketingSystemView Button Actions calls refreshData when refresh button clicked",
        "TicketingSystemView Button Actions disables export button when no data",
        "TicketingSystemView Item Selection allows selecting items",
        "TicketingSystemView Item Selection displays selected count when items are selected",
        "TicketingSystemView Error Handling displays error message when error occurs",
        "TicketingSystemView Error Handling does not display error when no error",
        "TicketingSystemView Error Handling shows error alert with proper styling",
        "TicketingSystemView Accessibility has accessible data-cy attributes",
        "TicketingSystemView Accessibility has accessible button labels",
        "TicketingSystemView Accessibility has accessible form labels",
        "TicketingSystemView Integration handles complete workflow"
      ]
    },
    {
      "file": "views/advanced/KnowledgeBaseView.test.tsx",
      "count": 24,
      "tests": [
        "KnowledgeBaseView Rendering renders without crashing",
        "KnowledgeBaseView Rendering displays the view title",
        "KnowledgeBaseView Rendering displays the view description",
        "KnowledgeBaseView Rendering displays the icon",
        "KnowledgeBaseView Rendering has proper heading structure",
        "KnowledgeBaseView Loading State shows loading state when data is loading",
        "KnowledgeBaseView Loading State does not show loading state when data is loaded",
        "KnowledgeBaseView Data Display displays data when loaded",
        "KnowledgeBaseView Data Display shows empty state when no data",
        "KnowledgeBaseView Search and Filtering renders search input",
        "KnowledgeBaseView Search and Filtering handles search input changes",
        "KnowledgeBaseView Button Actions renders action buttons",
        "KnowledgeBaseView Button Actions calls exportData when export button clicked",
        "KnowledgeBaseView Button Actions calls refreshData when refresh button clicked",
        "KnowledgeBaseView Button Actions disables export button when no data",
        "KnowledgeBaseView Item Selection allows selecting items",
        "KnowledgeBaseView Item Selection displays selected count when items are selected",
        "KnowledgeBaseView Error Handling displays error message when error occurs",
        "KnowledgeBaseView Error Handling does not display error when no error",
        "KnowledgeBaseView Error Handling shows error alert with proper styling",
        "KnowledgeBaseView Accessibility has accessible data-cy attributes",
        "KnowledgeBaseView Accessibility has accessible button labels",
        "KnowledgeBaseView Accessibility has accessible form labels",
        "KnowledgeBaseView Integration handles complete workflow"
      ]
    },
    {
      "file": "main/services/migrationValidationService.test.ts",
      "count": 2,
      "tests": [
        "MigrationValidationService getReportsByWave should retrieve all reports for a wave",
        "MigrationValidationService getReportsByWave should return empty array for wave with no reports"
      ]
    },
    {
      "file": "components/organisms/VirtualizedDataGrid.test.tsx",
      "count": 1,
      "tests": [
        "VirtualizedDataGrid should display loading state"
      ]
    }
  ]
}