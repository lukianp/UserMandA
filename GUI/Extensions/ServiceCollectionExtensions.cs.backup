using System;
using Microsoft.Extensions.DependencyInjection;
using MandADiscoverySuite.Services;
using MandADiscoverySuite.ViewModels;

namespace MandADiscoverySuite.Extensions
{
    /// <summary>
    /// Extension methods for configuring dependency injection
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Configures all application services for dependency injection
        /// </summary>
        public static IServiceCollection ConfigureApplicationServices(this IServiceCollection services)
        {
            // Register services as singletons
            services.AddSingleton<ConfigurationService>();
            services.AddSingleton<ProfileService>();
            services.AddSingleton<DiscoveryService>();
            services.AddSingleton<ErrorHandlingService>(provider => ErrorHandlingService.Instance);
            services.AddSingleton<InputValidationService>();
            
            // Register ViewModels as transient (new instance each time)
            services.AddTransient<MainViewModel>(provider => new MainViewModel(
                provider.GetRequiredService<DiscoveryService>(),
                provider.GetRequiredService<ProfileService>(),
                provider.GetRequiredService<DataVisualizationViewModel>()
            ));
            services.AddTransient<DataVisualizationViewModel>();
            
            // Register factories for ViewModels that need parameters
            services.AddTransient<Func<dynamic, string, UserDetailViewModel>>(provider =>
                (selectedUser, rawDataPath) => new UserDetailViewModel(selectedUser, rawDataPath));
            
            services.AddTransient<Func<string, string, string, bool, DiscoveryModuleViewModel>>(provider =>
                (moduleName, displayName, description, isEnabled) => 
                    new DiscoveryModuleViewModel(moduleName, displayName, description, isEnabled));

            return services;
        }
    }
}