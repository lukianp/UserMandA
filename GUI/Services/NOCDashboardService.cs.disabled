using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace MandADiscoverySuite.Services
{
    /// <summary>
    /// Network Operations Center (NOC) Dashboard Service
    /// Provides real-time monitoring dashboards for 24/7 operations teams
    /// </summary>
    public class NOCDashboardService : IDisposable
    {
        private readonly EnterpriseMonitoringService _monitoringService;
        private readonly ILogger<NOCDashboardService> _logger;
        private readonly NOCConfiguration _config;
        private readonly Dictionary<string, NOCWidget> _widgets;
        
        public NOCDashboardService(
            EnterpriseMonitoringService monitoringService,
            NOCConfiguration config = null,
            ILogger<NOCDashboardService> logger = null)
        {
            _monitoringService = monitoringService ?? throw new ArgumentNullException(nameof(monitoringService));
            _config = config ?? new NOCConfiguration();
            _logger = logger;
            _widgets = new Dictionary<string, NOCWidget>();
            
            InitializeDashboardWidgets();
        }
        
        #region Dashboard Configuration
        
        private void InitializeDashboardWidgets()
        {
            // System Health Overview Widget
            _widgets["system_health"] = new NOCWidget
            {
                Id = "system_health",
                Title = "System Health Overview",
                Type = NOCWidgetType.StatusGrid,
                Size = NOCWidgetSize.Large,
                RefreshIntervalSeconds = 30,
                Priority = NOCWidgetPriority.Critical
            };
            
            // Performance Metrics Widget
            _widgets["performance_metrics"] = new NOCWidget
            {
                Id = "performance_metrics",
                Title = "Performance Metrics",
                Type = NOCWidgetType.MetricsChart,
                Size = NOCWidgetSize.Large,
                RefreshIntervalSeconds = 15,
                Priority = NOCWidgetPriority.High
            };
            
            // Active Alerts Widget
            _widgets["active_alerts"] = new NOCWidget
            {
                Id = "active_alerts",
                Title = "Active Alerts",
                Type = NOCWidgetType.AlertsList,
                Size = NOCWidgetSize.Medium,
                RefreshIntervalSeconds = 10,
                Priority = NOCWidgetPriority.Critical
            };
            
            // Migration Status Widget
            _widgets["migration_status"] = new NOCWidget
            {
                Id = "migration_status",
                Title = "Migration Status",
                Type = NOCWidgetType.ProgressBars,
                Size = NOCWidgetSize.Medium,
                RefreshIntervalSeconds = 30,
                Priority = NOCWidgetPriority.High
            };
            
            // Customer Health Scores Widget
            _widgets["customer_health"] = new NOCWidget
            {
                Id = "customer_health",
                Title = "Customer Health Scores",
                Type = NOCWidgetType.ScoreCards,
                Size = NOCWidgetSize.Medium,
                RefreshIntervalSeconds = 300, // 5 minutes
                Priority = NOCWidgetPriority.Medium
            };
            
            // Security Events Widget
            _widgets["security_events"] = new NOCWidget
            {
                Id = "security_events",
                Title = "Security Events (24h)",
                Type = NOCWidgetType.SecurityFeed,
                Size = NOCWidgetSize.Small,
                RefreshIntervalSeconds = 60,
                Priority = NOCWidgetPriority.High
            };
            
            // System Resources Widget
            _widgets["system_resources"] = new NOCWidget
            {
                Id = "system_resources",
                Title = "System Resources",
                Type = NOCWidgetType.ResourceGauges,
                Size = NOCWidgetSize.Small,
                RefreshIntervalSeconds = 15,
                Priority = NOCWidgetPriority.Medium
            };
            
            // Compliance Status Widget
            _widgets["compliance_status"] = new NOCWidget
            {
                Id = "compliance_status",
                Title = "Compliance Status",
                Type = NOCWidgetType.ComplianceGrid,
                Size = NOCWidgetSize.Small,
                RefreshIntervalSeconds = 3600, // 1 hour
                Priority = NOCWidgetPriority.Low
            };
        }
        
        #endregion
        
        #region Dashboard Data Generation
        
        /// <summary>
        /// Generate complete NOC dashboard data
        /// </summary>
        public async Task<NOCDashboardData> GenerateDashboardDataAsync()
        {
            var dashboardData = new NOCDashboardData
            {
                GeneratedAt = DateTime.UtcNow,
                CustomerName = _config.CustomerName,
                EnvironmentName = _config.EnvironmentName
            };
            
            // Generate data for each widget
            foreach (var widget in _widgets.Values)
            {
                try
                {
                    var widgetData = await GenerateWidgetDataAsync(widget);
                    dashboardData.Widgets.Add(widgetData);
                }
                catch (Exception ex)
                {
                    _logger?.LogError(ex, "Error generating data for widget {WidgetId}", widget.Id);
                    
                    // Add error widget
                    dashboardData.Widgets.Add(new NOCWidgetData
                    {
                        WidgetId = widget.Id,
                        Title = widget.Title,
                        Type = widget.Type,
                        Status = NOCWidgetStatus.Error,
                        ErrorMessage = $"Error loading widget: {ex.Message}",
                        LastUpdated = DateTime.UtcNow
                    });
                }
            }
            
            // Calculate overall dashboard health
            dashboardData.OverallHealth = CalculateOverallHealth(dashboardData);
            
            return dashboardData;
        }
        
        private async Task<NOCWidgetData> GenerateWidgetDataAsync(NOCWidget widget)
        {
            var widgetData = new NOCWidgetData
            {
                WidgetId = widget.Id,
                Title = widget.Title,
                Type = widget.Type,
                Status = NOCWidgetStatus.Healthy,
                LastUpdated = DateTime.UtcNow
            };
            
            switch (widget.Type)
            {
                case NOCWidgetType.StatusGrid:
                    widgetData.Data = await GenerateSystemHealthData();
                    break;
                    
                case NOCWidgetType.MetricsChart:
                    widgetData.Data = await GeneratePerformanceMetricsData();
                    break;
                    
                case NOCWidgetType.AlertsList:
                    widgetData.Data = await GenerateActiveAlertsData();
                    break;
                    
                case NOCWidgetType.ProgressBars:
                    widgetData.Data = await GenerateMigrationStatusData();
                    break;
                    
                case NOCWidgetType.ScoreCards:
                    widgetData.Data = await GenerateCustomerHealthData();
                    break;
                    
                case NOCWidgetType.SecurityFeed:
                    widgetData.Data = await GenerateSecurityEventsData();
                    break;
                    
                case NOCWidgetType.ResourceGauges:
                    widgetData.Data = await GenerateSystemResourcesData();
                    break;
                    
                case NOCWidgetType.ComplianceGrid:
                    widgetData.Data = await GenerateComplianceStatusData();
                    break;
                    
                default:
                    widgetData.Status = NOCWidgetStatus.Error;
                    widgetData.ErrorMessage = $"Unknown widget type: {widget.Type}";
                    break;
            }
            
            return widgetData;
        }
        
        private async Task<object> GenerateSystemHealthData()
        {
            var systemHealth = _monitoringService.GetSystemHealth();
            
            return new
            {
                overall_status = systemHealth.OverallStatus.ToString(),
                critical_issues = systemHealth.CriticalIssueCount,
                warning_issues = systemHealth.WarningIssueCount,
                health_checks = systemHealth.HealthChecks.Select(hc => new
                {
                    name = hc.CheckName,
                    status = hc.Status.ToString(),
                    message = hc.Message,
                    timestamp = hc.Timestamp
                })
            };
        }
        
        private async Task<object> GeneratePerformanceMetricsData()
        {
            var performanceMetrics = await _monitoringService.GetPerformanceMetricsAsync();
            
            return new
            {
                cpu_usage = performanceMetrics.CpuUsagePercent,
                memory_usage_mb = performanceMetrics.MemoryUsageMB,
                response_time_ms = performanceMetrics.AverageResponseTimeMs,
                throughput_per_sec = performanceMetrics.ThroughputPerSecond,
                error_rate_percent = performanceMetrics.ErrorRatePercent,
                active_connections = performanceMetrics.ActiveConnections,
                network_io_mbps = performanceMetrics.NetworkIoMbps,
                disk_io_percent = performanceMetrics.DiskIoUsagePercent
            };
        }
        
        private async Task<object> GenerateActiveAlertsData()
        {
            // This would integrate with your alert management system
            // For now, returning sample data structure
            return new
            {
                total_active_alerts = 3,
                critical_alerts = 1,
                warning_alerts = 2,
                alerts = new[]
                {
                    new
                    {
                        level = "Critical",
                        title = "High Memory Usage Detected",
                        source = "Performance",
                        timestamp = DateTime.UtcNow.AddMinutes(-15),
                        acknowledged = false
                    },
                    new
                    {
                        level = "Warning",
                        title = "PowerShell Execution Timeout",
                        source = "Migration",
                        timestamp = DateTime.UtcNow.AddMinutes(-32),
                        acknowledged = false
                    },
                    new
                    {
                        level = "Warning",
                        title = "Low Disk Space on C: Drive",
                        source = "System",
                        timestamp = DateTime.UtcNow.AddHours(-2),
                        acknowledged = true
                    }
                }
            };
        }
        
        private async Task<object> GenerateMigrationStatusData()
        {
            return new
            {
                active_migrations = 2,
                completed_today = 5,
                pending_migrations = 8,
                success_rate_percent = 98.5,
                current_migrations = new[]
                {
                    new
                    {
                        name = "Exchange Mailbox Migration - Batch 3",
                        progress_percent = 67,
                        status = "Running",
                        eta_minutes = 45,
                        items_processed = 1340,
                        total_items = 2000
                    },
                    new
                    {
                        name = "User Profile Migration - Finance Dept",
                        progress_percent = 23,
                        status = "Running",
                        eta_minutes = 120,
                        items_processed = 89,
                        total_items = 387
                    }
                }
            };
        }
        
        private async Task<object> GenerateCustomerHealthData()
        {
            var customerMetrics = await _monitoringService.GetCustomerSuccessMetricsAsync();
            
            return new
            {
                overall_health_score = customerMetrics.HealthScore,
                migration_success_rate = customerMetrics.MigrationSuccessRate,
                user_adoption_rate = customerMetrics.UserAdoptionRate,
                open_tickets = customerMetrics.OpenTicketCount,
                avg_resolution_hours = customerMetrics.AverageResolutionTimeHours,
                total_users_migrated = customerMetrics.TotalUsersMigrated,
                last_migration = customerMetrics.LastMigrationDate
            };
        }
        
        private async Task<object> GenerateSecurityEventsData()
        {
            var securityReport = await _monitoringService.GetSecurityReportAsync();
            
            return new
            {
                events_last_24h = securityReport.SecurityEventsLast24Hours,
                failed_auth_attempts = securityReport.FailedAuthenticationAttempts,
                suspicious_activities = securityReport.SuspiciousActivitiesCount,
                recent_events = securityReport.RecentSecurityEvents.Select(e => new
                {
                    type = e.EventType,
                    description = e.Description,
                    severity = e.Severity,
                    timestamp = e.Timestamp,
                    user = e.UserAccount,
                    ip = e.IpAddress
                })
            };
        }
        
        private async Task<object> GenerateSystemResourcesData()
        {
            var performanceMetrics = await _monitoringService.GetPerformanceMetricsAsync();
            
            // Get additional system information
            var totalMemoryGB = GC.GetTotalMemory(false) / (1024.0 * 1024.0 * 1024.0);
            var availableMemoryGB = (performanceMetrics.MemoryUsageMB / 1024.0);
            
            return new
            {
                cpu_usage = new
                {
                    current = performanceMetrics.CpuUsagePercent,
                    threshold = 80.0,
                    status = performanceMetrics.CpuUsagePercent > 80 ? "Warning" : "Normal"
                },
                memory_usage = new
                {
                    used_gb = availableMemoryGB,
                    total_gb = totalMemoryGB + availableMemoryGB,
                    percent = (availableMemoryGB / (totalMemoryGB + availableMemoryGB)) * 100,
                    status = availableMemoryGB > 1.5 ? "Normal" : "Warning"
                },
                disk_io = new
                {
                    current = performanceMetrics.DiskIoUsagePercent,
                    threshold = 80.0,
                    status = performanceMetrics.DiskIoUsagePercent > 80 ? "Warning" : "Normal"
                },
                network_io = new
                {
                    current_mbps = performanceMetrics.NetworkIoMbps,
                    status = "Normal"
                }
            };
        }
        
        private async Task<object> GenerateComplianceStatusData()
        {
            var complianceReport = await _monitoringService.GetComplianceReportAsync();
            
            return new
            {
                sox_compliant = complianceReport.SoxCompliant,
                gdpr_compliant = complianceReport.GdprCompliant,
                hipaa_compliant = complianceReport.HipaaCompliant,
                audit_trail_integrity = complianceReport.AuditTrailIntegrity,
                data_retention_compliant = complianceReport.DataRetentionCompliant,
                violations_count = complianceReport.Violations.Count,
                last_check = complianceReport.LastComplianceCheck
            };
        }
        
        #endregion
        
        #region Dashboard Export and Persistence
        
        /// <summary>
        /// Export dashboard data to JSON for web interfaces or external systems
        /// </summary>
        public async Task<string> ExportDashboardToJsonAsync()
        {
            var dashboardData = await GenerateDashboardDataAsync();
            
            var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                WriteIndented = true
            };
            
            return JsonSerializer.Serialize(dashboardData, options);
        }
        
        /// <summary>
        /// Export dashboard data to HTML for standalone viewing
        /// </summary>
        public async Task<string> ExportDashboardToHtmlAsync()
        {
            var dashboardData = await GenerateDashboardDataAsync();
            var html = new StringBuilder();
            
            html.AppendLine("<!DOCTYPE html>");
            html.AppendLine("<html>");
            html.AppendLine("<head>");
            html.AppendLine("    <title>M&A Discovery Suite - NOC Dashboard</title>");
            html.AppendLine("    <meta charset='utf-8'>");
            html.AppendLine("    <meta name='viewport' content='width=device-width, initial-scale=1'>");
            html.AppendLine("    <style>");
            html.AppendLine(GetDashboardCSS());
            html.AppendLine("    </style>");
            html.AppendLine("</head>");
            html.AppendLine("<body>");
            
            // Header
            html.AppendLine($"    <header class='dashboard-header'>");
            html.AppendLine($"        <h1>M&A Discovery Suite - NOC Dashboard</h1>");
            html.AppendLine($"        <div class='header-info'>");
            html.AppendLine($"            <span>Customer: {dashboardData.CustomerName}</span>");
            html.AppendLine($"            <span>Environment: {dashboardData.EnvironmentName}</span>");
            html.AppendLine($"            <span>Generated: {dashboardData.GeneratedAt:yyyy-MM-dd HH:mm:ss} UTC</span>");
            html.AppendLine($"            <span class='health-indicator health-{dashboardData.OverallHealth.ToString().ToLower()}'>{dashboardData.OverallHealth}</span>");
            html.AppendLine($"        </div>");
            html.AppendLine($"    </header>");
            
            // Dashboard content
            html.AppendLine("    <main class='dashboard-grid'>");
            
            foreach (var widget in dashboardData.Widgets)
            {
                html.AppendLine($"        <div class='widget widget-{widget.Type.ToString().ToLower()}'>");
                html.AppendLine($"            <div class='widget-header'>");
                html.AppendLine($"                <h3>{widget.Title}</h3>");
                html.AppendLine($"                <span class='widget-status status-{widget.Status.ToString().ToLower()}'>{widget.Status}</span>");
                html.AppendLine($"            </div>");
                html.AppendLine($"            <div class='widget-content'>");
                
                if (widget.Status == NOCWidgetStatus.Error)
                {
                    html.AppendLine($"                <p class='error-message'>{widget.ErrorMessage}</p>");
                }
                else
                {
                    html.AppendLine($"                <pre class='widget-data'>{JsonSerializer.Serialize(widget.Data, new JsonSerializerOptions { WriteIndented = true })}</pre>");
                }
                
                html.AppendLine($"            </div>");
                html.AppendLine($"            <div class='widget-footer'>");
                html.AppendLine($"                <span>Last Updated: {widget.LastUpdated:HH:mm:ss}</span>");
                html.AppendLine($"            </div>");
                html.AppendLine($"        </div>");
            }
            
            html.AppendLine("    </main>");
            html.AppendLine("    <script>");
            html.AppendLine("        // Auto-refresh every 30 seconds");
            html.AppendLine("        setTimeout(() => window.location.reload(), 30000);");
            html.AppendLine("    </script>");
            html.AppendLine("</body>");
            html.AppendLine("</html>");
            
            return html.ToString();
        }
        
        /// <summary>
        /// Save dashboard data to file system for historical analysis
        /// </summary>
        public async Task SaveDashboardSnapshotAsync(string filePath = null)
        {
            filePath = filePath ?? Path.Combine(
                _config.DashboardArchivePath,
                $"noc_dashboard_{DateTime.UtcNow:yyyyMMdd_HHmmss}.json");
            
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            
            var dashboardJson = await ExportDashboardToJsonAsync();
            await File.WriteAllTextAsync(filePath, dashboardJson);
            
            _logger?.LogInformation("Dashboard snapshot saved to {FilePath}", filePath);
        }
        
        #endregion
        
        #region Helper Methods
        
        private NOCDashboardHealth CalculateOverallHealth(NOCDashboardData dashboardData)
        {
            var errorWidgets = dashboardData.Widgets.Count(w => w.Status == NOCWidgetStatus.Error);
            var warningWidgets = dashboardData.Widgets.Count(w => w.Status == NOCWidgetStatus.Warning);
            var totalWidgets = dashboardData.Widgets.Count;
            
            if (errorWidgets > totalWidgets * 0.2) // More than 20% error
                return NOCDashboardHealth.Critical;
                
            if (errorWidgets > 0 || warningWidgets > totalWidgets * 0.3) // Any errors or >30% warnings
                return NOCDashboardHealth.Warning;
                
            return NOCDashboardHealth.Healthy;
        }
        
        private string GetDashboardCSS()
        {
            return @"
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background: #1a1a1a; color: #ffffff; }
                .dashboard-header { background: #2d2d2d; padding: 20px; border-bottom: 2px solid #007acc; }
                .dashboard-header h1 { margin: 0; color: #007acc; }
                .header-info { margin-top: 10px; }
                .header-info span { margin-right: 20px; padding: 5px 10px; background: #3d3d3d; border-radius: 4px; }
                .health-indicator { font-weight: bold; }
                .health-healthy { background: #28a745 !important; }
                .health-warning { background: #ffc107 !important; color: #000; }
                .health-critical { background: #dc3545 !important; }
                .dashboard-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; padding: 20px; }
                .widget { background: #2d2d2d; border-radius: 8px; border: 1px solid #444; }
                .widget-header { background: #3d3d3d; padding: 15px; border-radius: 8px 8px 0 0; display: flex; justify-content: space-between; align-items: center; }
                .widget-header h3 { margin: 0; }
                .widget-status { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
                .status-healthy { background: #28a745; }
                .status-warning { background: #ffc107; color: #000; }
                .status-error { background: #dc3545; }
                .widget-content { padding: 15px; max-height: 300px; overflow-y: auto; }
                .widget-data { background: #1a1a1a; padding: 10px; border-radius: 4px; font-size: 12px; white-space: pre-wrap; }
                .error-message { color: #ff6b6b; font-weight: bold; }
                .widget-footer { background: #3d3d3d; padding: 10px 15px; border-radius: 0 0 8px 8px; font-size: 12px; color: #ccc; }
            ";
        }
        
        #endregion
        
        public void Dispose()
        {
            // Clean up NOC dashboard resources
            _logger?.LogInformation("NOC Dashboard service disposed");
        }
    }
    
    #region NOC Configuration and Models
    
    public class NOCConfiguration
    {
        public string CustomerName { get; set; } = "Enterprise Customer";
        public string EnvironmentName { get; set; } = "Production";
        public string DashboardArchivePath { get; set; } = @"C:\ProgramData\MandADiscoverySuite\NOC\Archives";
        public int DefaultRefreshIntervalSeconds { get; set; } = 30;
        public bool EnableAutoRefresh { get; set; } = true;
        public bool SaveHistoricalSnapshots { get; set; } = true;
        public int HistoricalSnapshotIntervalMinutes { get; set; } = 15;
    }
    
    public class NOCDashboardData
    {
        public DateTime GeneratedAt { get; set; }
        public string CustomerName { get; set; }
        public string EnvironmentName { get; set; }
        public NOCDashboardHealth OverallHealth { get; set; }
        public List<NOCWidgetData> Widgets { get; set; } = new List<NOCWidgetData>();
    }
    
    public class NOCWidget
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public NOCWidgetType Type { get; set; }
        public NOCWidgetSize Size { get; set; }
        public int RefreshIntervalSeconds { get; set; }
        public NOCWidgetPriority Priority { get; set; }
    }
    
    public class NOCWidgetData
    {
        public string WidgetId { get; set; }
        public string Title { get; set; }
        public NOCWidgetType Type { get; set; }
        public NOCWidgetStatus Status { get; set; }
        public object Data { get; set; }
        public string ErrorMessage { get; set; }
        public DateTime LastUpdated { get; set; }
    }
    
    public enum NOCWidgetType
    {
        StatusGrid,
        MetricsChart,
        AlertsList,
        ProgressBars,
        ScoreCards,
        SecurityFeed,
        ResourceGauges,
        ComplianceGrid
    }
    
    public enum NOCWidgetSize
    {
        Small,
        Medium,
        Large
    }
    
    public enum NOCWidgetPriority
    {
        Low,
        Medium,
        High,
        Critical
    }
    
    public enum NOCWidgetStatus
    {
        Healthy,
        Warning,
        Error
    }
    
    public enum NOCDashboardHealth
    {
        Healthy,
        Warning,
        Critical
    }
    
    #endregion
}