using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Management;

namespace MandADiscoverySuite.Services
{
    /// <summary>
    /// Enterprise-grade monitoring service for Fortune 500 deployments
    /// Provides comprehensive health monitoring, performance tracking, and alerting
    /// </summary>
    public class EnterpriseMonitoringService : IDisposable
    {
        private readonly ILogger<EnterpriseMonitoringService> _logger;
        private readonly Timer _healthCheckTimer;
        private readonly Timer _metricsCollectionTimer;
        private readonly ConcurrentDictionary<string, HealthCheckResult> _healthChecks;
        private readonly ConcurrentQueue<AlertEvent> _alertQueue;
        private readonly List<IAlertChannel> _alertChannels;
        private readonly PerformanceMetricsCollector _metricsCollector;
        private readonly SecurityMonitor _securityMonitor;
        private readonly ComplianceMonitor _complianceMonitor;
        private readonly CustomerSuccessMonitor _customerSuccessMonitor;
        private readonly CancellationTokenSource _cancellationTokenSource;
        private bool _isDisposed;
        
        // Configuration
        private readonly EnterpriseMonitoringConfiguration _config;
        
        public event EventHandler<CriticalAlertEventArgs> CriticalAlertRaised;
        public event EventHandler<HealthStatusChangedEventArgs> HealthStatusChanged;
        public event EventHandler<PerformanceThresholdExceededEventArgs> PerformanceThresholdExceeded;
        public event EventHandler<SecurityEventDetectedEventArgs> SecurityEventDetected;
        public event EventHandler<ComplianceViolationEventArgs> ComplianceViolationDetected;
        
        public EnterpriseMonitoringService(
            EnterpriseMonitoringConfiguration config = null,
            ILogger<EnterpriseMonitoringService> logger = null)
        {
            _logger = logger;
            _config = config ?? new EnterpriseMonitoringConfiguration();
            _cancellationTokenSource = new CancellationTokenSource();
            
            // Initialize collections
            _healthChecks = new ConcurrentDictionary<string, HealthCheckResult>();
            _alertQueue = new ConcurrentQueue<AlertEvent>();
            _alertChannels = new List<IAlertChannel>();
            
            // Initialize monitoring components
            _metricsCollector = new PerformanceMetricsCollector(_config, _logger);
            _securityMonitor = new SecurityMonitor(_config, _logger);
            _complianceMonitor = new ComplianceMonitor(_config, _logger);
            _customerSuccessMonitor = new CustomerSuccessMonitor(_config, _logger);
            
            // Initialize alert channels
            InitializeAlertChannels();
            
            // Start monitoring timers
            _healthCheckTimer = new Timer(PerformHealthChecks, null, TimeSpan.Zero, _config.HealthCheckInterval);
            _metricsCollectionTimer = new Timer(CollectMetrics, null, TimeSpan.Zero, _config.MetricsCollectionInterval);
            
            // Start alert processing
            Task.Run(ProcessAlerts, _cancellationTokenSource.Token);
            
            _logger?.LogInformation("Enterprise monitoring service initialized for Fortune 500 deployment");
        }
        
        #region Health Monitoring
        
        /// <summary>
        /// Perform comprehensive health checks
        /// </summary>
        private async void PerformHealthChecks(object state)
        {
            if (_isDisposed) return;
            
            try
            {
                var healthTasks = new List<Task<HealthCheckResult>>
                {
                    CheckApplicationHealth(),
                    CheckDatabaseHealth(),
                    CheckPowerShellModuleHealth(),
                    CheckSystemResourceHealth(),
                    CheckNetworkConnectivity(),
                    CheckDiskSpaceHealth(),
                    CheckServiceDependencies(),
                    CheckLicensingHealth()
                };
                
                var results = await Task.WhenAll(healthTasks);
                
                // Process health check results
                foreach (var result in results)
                {
                    var previousResult = _healthChecks.GetValueOrDefault(result.CheckName);
                    _healthChecks.AddOrUpdate(result.CheckName, result, (key, old) => result);
                    
                    // Trigger alerts for status changes or failures
                    if (result.Status != HealthStatus.Healthy)
                    {
                        await RaiseAlert(new AlertEvent
                        {
                            Level = result.Status == HealthStatus.Critical ? AlertLevel.Critical : AlertLevel.Warning,
                            Source = "HealthCheck",
                            Category = "System Health",
                            Title = $"Health Check Failed: {result.CheckName}",
                            Description = result.Message,
                            Details = result.Details,
                            Timestamp = DateTime.UtcNow,
                            CustomerId = _config.CustomerId
                        });
                    }
                    
                    // Trigger status change event if status changed
                    if (previousResult == null || previousResult.Status != result.Status)
                    {
                        HealthStatusChanged?.Invoke(this, new HealthStatusChangedEventArgs
                        {
                            CheckName = result.CheckName,
                            PreviousStatus = previousResult?.Status ?? HealthStatus.Unknown,
                            CurrentStatus = result.Status,
                            Message = result.Message
                        });
                    }
                }
                
                // Update overall system health
                UpdateOverallSystemHealth();
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error performing health checks");
            }
        }
        
        private async Task<HealthCheckResult> CheckApplicationHealth()
        {
            var result = new HealthCheckResult { CheckName = "Application" };
            
            try
            {
                // Check if main application processes are running
                var processes = Process.GetProcessesByName("MandADiscoverySuite");
                if (processes.Length == 0)
                {
                    result.Status = HealthStatus.Critical;
                    result.Message = "Main application process not found";
                    result.Details = "M&A Discovery Suite application is not running";
                    return result;
                }
                
                var mainProcess = processes[0];
                
                // Check memory usage
                var memoryUsageMB = mainProcess.WorkingSet64 / (1024 * 1024);
                if (memoryUsageMB > _config.MemoryThresholdMB)
                {
                    result.Status = HealthStatus.Warning;
                    result.Message = $"High memory usage: {memoryUsageMB}MB";
                }
                
                // Check CPU usage
                var cpuUsage = await GetProcessCpuUsage(mainProcess.Id);
                if (cpuUsage > _config.CpuThresholdPercent)
                {
                    result.Status = result.Status == HealthStatus.Warning ? HealthStatus.Warning : HealthStatus.Warning;
                    result.Message += $", High CPU usage: {cpuUsage:F1}%";
                }
                
                // Check thread count
                if (mainProcess.Threads.Count > _config.ThreadCountThreshold)
                {
                    result.Status = HealthStatus.Warning;
                    result.Message += $", High thread count: {mainProcess.Threads.Count}";
                }
                
                if (result.Status == HealthStatus.Unknown)
                {
                    result.Status = HealthStatus.Healthy;
                    result.Message = "Application running normally";
                }
                
                result.Details = $"PID: {mainProcess.Id}, Memory: {memoryUsageMB}MB, CPU: {cpuUsage:F1}%, Threads: {mainProcess.Threads.Count}";
            }
            catch (Exception ex)
            {
                result.Status = HealthStatus.Critical;
                result.Message = $"Error checking application health: {ex.Message}";
                result.Details = ex.ToString();
            }
            
            return result;
        }
        
        private async Task<HealthCheckResult> CheckDatabaseHealth()
        {
            var result = new HealthCheckResult { CheckName = "Database" };
            
            try
            {
                // Check database connectivity and performance
                var stopwatch = Stopwatch.StartNew();
                
                // Perform a simple query to test connectivity
                // This would be implemented based on your database technology
                var isConnected = await TestDatabaseConnection();
                
                stopwatch.Stop();
                
                if (!isConnected)
                {
                    result.Status = HealthStatus.Critical;
                    result.Message = "Database connection failed";
                    result.Details = "Unable to connect to the database";
                    return result;
                }
                
                var responseTimeMs = stopwatch.ElapsedMilliseconds;
                if (responseTimeMs > _config.DatabaseResponseThresholdMs)
                {
                    result.Status = HealthStatus.Warning;
                    result.Message = $"Slow database response: {responseTimeMs}ms";
                }
                
                if (result.Status == HealthStatus.Unknown)
                {
                    result.Status = HealthStatus.Healthy;
                    result.Message = "Database connection healthy";
                }
                
                result.Details = $"Response time: {responseTimeMs}ms";
            }
            catch (Exception ex)
            {
                result.Status = HealthStatus.Critical;
                result.Message = $"Database health check failed: {ex.Message}";
                result.Details = ex.ToString();
            }
            
            return result;
        }
        
        private async Task<HealthCheckResult> CheckPowerShellModuleHealth()
        {
            var result = new HealthCheckResult { CheckName = "PowerShell Modules" };
            
            try
            {
                // Check if PowerShell modules are loadable and functional
                var moduleTests = new Dictionary<string, bool>
                {
                    { "UserMigration", await TestPowerShellModule("UserMigration") },
                    { "MailboxMigration", await TestPowerShellModule("MailboxMigration") },
                    { "SharePointMigration", await TestPowerShellModule("SharePointMigration") },
                    { "FileSystemMigration", await TestPowerShellModule("FileSystemMigration") }
                };
                
                var failedModules = moduleTests.Where(m => !m.Value).Select(m => m.Key).ToList();
                
                if (failedModules.Any())
                {
                    result.Status = HealthStatus.Critical;
                    result.Message = $"PowerShell modules failed: {string.Join(", ", failedModules)}";
                    result.Details = "Critical migration modules are not functioning properly";
                }
                else
                {
                    result.Status = HealthStatus.Healthy;
                    result.Message = "All PowerShell modules operational";
                    result.Details = $"Tested modules: {string.Join(", ", moduleTests.Keys)}";
                }
            }
            catch (Exception ex)
            {
                result.Status = HealthStatus.Critical;
                result.Message = $"PowerShell module health check failed: {ex.Message}";
                result.Details = ex.ToString();
            }
            
            return result;
        }
        
        private async Task<HealthCheckResult> CheckSystemResourceHealth()
        {
            var result = new HealthCheckResult { CheckName = "System Resources" };
            
            try
            {
                var issues = new List<string>();
                
                // Check CPU usage
                var cpuUsage = await GetSystemCpuUsage();
                if (cpuUsage > _config.SystemCpuThreshold)
                {
                    issues.Add($"High CPU usage: {cpuUsage:F1}%");
                }
                
                // Check memory usage
                var memoryInfo = await GetSystemMemoryInfo();
                var memoryUsagePercent = (double)(memoryInfo.TotalMemory - memoryInfo.AvailableMemory) / memoryInfo.TotalMemory * 100;
                if (memoryUsagePercent > _config.SystemMemoryThreshold)
                {
                    issues.Add($"High memory usage: {memoryUsagePercent:F1}%");
                }
                
                // Check disk I/O
                var diskIoUsage = await GetDiskIoUsage();
                if (diskIoUsage > _config.DiskIoThreshold)
                {
                    issues.Add($"High disk I/O: {diskIoUsage:F1}%");
                }
                
                if (issues.Any())
                {
                    result.Status = HealthStatus.Warning;
                    result.Message = string.Join(", ", issues);
                }
                else
                {
                    result.Status = HealthStatus.Healthy;
                    result.Message = "System resources within normal limits";
                }
                
                result.Details = $"CPU: {cpuUsage:F1}%, Memory: {memoryUsagePercent:F1}%, Disk I/O: {diskIoUsage:F1}%";
            }
            catch (Exception ex)
            {
                result.Status = HealthStatus.Critical;
                result.Message = $"System resource check failed: {ex.Message}";
                result.Details = ex.ToString();
            }
            
            return result;
        }
        
        private async Task<HealthCheckResult> CheckNetworkConnectivity()
        {
            var result = new HealthCheckResult { CheckName = "Network Connectivity" };
            
            try
            {
                var connectivityTests = new Dictionary<string, bool>();
                
                // Test connectivity to essential services
                if (!string.IsNullOrEmpty(_config.ExchangeOnlineEndpoint))
                {
                    connectivityTests["Exchange Online"] = await TestHttpConnectivity(_config.ExchangeOnlineEndpoint);
                }
                
                if (!string.IsNullOrEmpty(_config.SharePointOnlineEndpoint))
                {
                    connectivityTests["SharePoint Online"] = await TestHttpConnectivity(_config.SharePointOnlineEndpoint);
                }
                
                if (!string.IsNullOrEmpty(_config.AzureADEndpoint))
                {
                    connectivityTests["Azure AD"] = await TestHttpConnectivity(_config.AzureADEndpoint);
                }
                
                var failedConnections = connectivityTests.Where(c => !c.Value).Select(c => c.Key).ToList();
                
                if (failedConnections.Any())
                {
                    result.Status = HealthStatus.Critical;
                    result.Message = $"Network connectivity failed: {string.Join(", ", failedConnections)}";
                    result.Details = "Unable to connect to required external services";
                }
                else
                {
                    result.Status = HealthStatus.Healthy;
                    result.Message = "Network connectivity operational";
                    result.Details = $"Tested endpoints: {string.Join(", ", connectivityTests.Keys)}";
                }
            }
            catch (Exception ex)
            {
                result.Status = HealthStatus.Warning;
                result.Message = $"Network connectivity check failed: {ex.Message}";
                result.Details = ex.ToString();
            }
            
            return result;
        }
        
        private async Task<HealthCheckResult> CheckDiskSpaceHealth()
        {
            var result = new HealthCheckResult { CheckName = "Disk Space" };
            
            try
            {
                var diskIssues = new List<string>();
                
                // Check all logical drives
                var drives = DriveInfo.GetDrives().Where(d => d.IsReady && d.DriveType == DriveType.Fixed);
                
                foreach (var drive in drives)
                {
                    var freeSpacePercent = (double)drive.AvailableFreeSpace / drive.TotalSize * 100;
                    var freeSpaceGB = drive.AvailableFreeSpace / (1024 * 1024 * 1024);
                    
                    if (freeSpacePercent < _config.DiskSpaceThresholdPercent)
                    {
                        diskIssues.Add($"Drive {drive.Name}: {freeSpacePercent:F1}% free ({freeSpaceGB:F1} GB)");
                    }
                }
                
                if (diskIssues.Any())
                {
                    result.Status = HealthStatus.Warning;
                    result.Message = "Low disk space detected";
                    result.Details = string.Join(", ", diskIssues);
                }
                else
                {
                    result.Status = HealthStatus.Healthy;
                    result.Message = "Disk space sufficient";
                    var driveInfo = drives.Select(d => $"{d.Name}: {(double)d.AvailableFreeSpace / d.TotalSize * 100:F1}% free");
                    result.Details = string.Join(", ", driveInfo);
                }
            }
            catch (Exception ex)
            {
                result.Status = HealthStatus.Warning;
                result.Message = $"Disk space check failed: {ex.Message}";
                result.Details = ex.ToString();
            }
            
            return result;
        }
        
        private async Task<HealthCheckResult> CheckServiceDependencies()
        {
            var result = new HealthCheckResult { CheckName = "Service Dependencies" };
            
            try
            {
                var serviceIssues = new List<string>();
                
                // Check Windows services that we depend on
                var requiredServices = new[] { "WinRM", "Spooler", "Themes", "MSSQLSERVER" };
                
                foreach (var serviceName in requiredServices)
                {
                    try
                    {
                        using var service = new System.ServiceProcess.ServiceController(serviceName);
                        if (service.Status != System.ServiceProcess.ServiceControllerStatus.Running)
                        {
                            serviceIssues.Add($"{serviceName}: {service.Status}");
                        }
                    }
                    catch
                    {
                        // Service might not exist - skip
                    }
                }
                
                if (serviceIssues.Any())
                {
                    result.Status = HealthStatus.Warning;
                    result.Message = "Service dependency issues detected";
                    result.Details = string.Join(", ", serviceIssues);
                }
                else
                {
                    result.Status = HealthStatus.Healthy;
                    result.Message = "Service dependencies operational";
                    result.Details = "All required Windows services are running";
                }
            }
            catch (Exception ex)
            {
                result.Status = HealthStatus.Warning;
                result.Message = $"Service dependency check failed: {ex.Message}";
                result.Details = ex.ToString();
            }
            
            return result;
        }
        
        private async Task<HealthCheckResult> CheckLicensingHealth()
        {
            var result = new HealthCheckResult { CheckName = "Licensing" };
            
            try
            {
                // Check license validity and expiration
                // This would integrate with your licensing system
                var licenseInfo = await GetLicenseInformation();
                
                if (!licenseInfo.IsValid)
                {
                    result.Status = HealthStatus.Critical;
                    result.Message = "License validation failed";
                    result.Details = licenseInfo.ErrorMessage;
                    return result;
                }
                
                var daysToExpiration = (licenseInfo.ExpirationDate - DateTime.UtcNow).TotalDays;
                if (daysToExpiration < 30)
                {
                    result.Status = HealthStatus.Warning;
                    result.Message = $"License expires in {daysToExpiration:F0} days";
                    result.Details = $"License expires on {licenseInfo.ExpirationDate:yyyy-MM-dd}";
                }
                else
                {
                    result.Status = HealthStatus.Healthy;
                    result.Message = "License valid";
                    result.Details = $"Licensed to: {licenseInfo.CustomerName}, Expires: {licenseInfo.ExpirationDate:yyyy-MM-dd}";
                }
            }
            catch (Exception ex)
            {
                result.Status = HealthStatus.Warning;
                result.Message = $"License check failed: {ex.Message}";
                result.Details = ex.ToString();
            }
            
            return result;
        }
        
        #endregion
        
        #region Performance Metrics Collection
        
        private async void CollectMetrics(object state)
        {
            if (_isDisposed) return;
            
            try
            {
                await _metricsCollector.CollectAllMetricsAsync();
                
                // Check for performance threshold violations
                var violations = await _metricsCollector.CheckPerformanceThresholds();
                
                foreach (var violation in violations)
                {
                    PerformanceThresholdExceeded?.Invoke(this, new PerformanceThresholdExceededEventArgs
                    {
                        MetricName = violation.MetricName,
                        CurrentValue = violation.CurrentValue,
                        ThresholdValue = violation.ThresholdValue,
                        Severity = violation.Severity
                    });
                    
                    await RaiseAlert(new AlertEvent
                    {
                        Level = violation.Severity == "Critical" ? AlertLevel.Critical : AlertLevel.Warning,
                        Source = "Performance",
                        Category = "Performance Threshold",
                        Title = $"Performance Threshold Exceeded: {violation.MetricName}",
                        Description = $"Current value: {violation.CurrentValue}, Threshold: {violation.ThresholdValue}",
                        Timestamp = DateTime.UtcNow,
                        CustomerId = _config.CustomerId
                    });
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error collecting performance metrics");
            }
        }
        
        #endregion
        
        #region Alert Management
        
        private void InitializeAlertChannels()
        {
            // Initialize different alert channels based on configuration
            if (_config.EmailAlertsEnabled)
            {
                _alertChannels.Add(new EmailAlertChannel(_config.EmailConfiguration));
            }
            
            if (_config.SlackAlertsEnabled)
            {
                _alertChannels.Add(new SlackAlertChannel(_config.SlackConfiguration));
            }
            
            if (_config.SiemIntegrationEnabled)
            {
                _alertChannels.Add(new SiemAlertChannel(_config.SiemConfiguration));
            }
            
            if (_config.WebhookAlertsEnabled)
            {
                _alertChannels.Add(new WebhookAlertChannel(_config.WebhookConfiguration));
            }
            
            // Always include event log channel
            _alertChannels.Add(new EventLogAlertChannel());
        }
        
        private async Task ProcessAlerts()
        {
            while (!_cancellationTokenSource.Token.IsCancellationRequested)
            {
                try
                {
                    if (_alertQueue.TryDequeue(out var alertEvent))
                    {
                        await ProcessSingleAlert(alertEvent);
                    }
                    else
                    {
                        await Task.Delay(1000, _cancellationTokenSource.Token);
                    }
                }
                catch (OperationCanceledException)
                {
                    break;
                }
                catch (Exception ex)
                {
                    _logger?.LogError(ex, "Error processing alerts");
                    await Task.Delay(5000, _cancellationTokenSource.Token);
                }
            }
        }
        
        private async Task ProcessSingleAlert(AlertEvent alertEvent)
        {
            try
            {
                // Log the alert
                _logger?.LogWarning("Alert raised: {Level} - {Title}: {Description}", 
                    alertEvent.Level, alertEvent.Title, alertEvent.Description);
                
                // Send to all configured alert channels
                var alertTasks = _alertChannels.Select(channel => 
                    SendAlertToChannel(channel, alertEvent)).ToArray();
                
                await Task.WhenAll(alertTasks);
                
                // Raise critical alert event if needed
                if (alertEvent.Level == AlertLevel.Critical || alertEvent.Level == AlertLevel.Emergency)
                {
                    CriticalAlertRaised?.Invoke(this, new CriticalAlertEventArgs
                    {
                        Alert = alertEvent
                    });
                }
                
                // Store alert for reporting
                await StoreAlertForReporting(alertEvent);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error processing alert: {AlertTitle}", alertEvent.Title);
            }
        }
        
        private async Task SendAlertToChannel(IAlertChannel channel, AlertEvent alertEvent)
        {
            try
            {
                await channel.SendAlertAsync(alertEvent);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error sending alert to channel {ChannelType}", channel.GetType().Name);
            }
        }
        
        public async Task RaiseAlert(AlertEvent alertEvent)
        {
            _alertQueue.Enqueue(alertEvent);
        }
        
        #endregion
        
        #region Public Methods
        
        /// <summary>
        /// Get current system health status
        /// </summary>
        public SystemHealthStatus GetSystemHealth()
        {
            var healthChecks = _healthChecks.Values.ToList();
            
            var overallStatus = HealthStatus.Healthy;
            var criticalIssues = healthChecks.Where(h => h.Status == HealthStatus.Critical).ToList();
            var warningIssues = healthChecks.Where(h => h.Status == HealthStatus.Warning).ToList();
            
            if (criticalIssues.Any())
            {
                overallStatus = HealthStatus.Critical;
            }
            else if (warningIssues.Any())
            {
                overallStatus = HealthStatus.Warning;
            }
            
            return new SystemHealthStatus
            {
                OverallStatus = overallStatus,
                HealthChecks = healthChecks,
                CriticalIssueCount = criticalIssues.Count,
                WarningIssueCount = warningIssues.Count,
                LastUpdated = DateTime.UtcNow
            };
        }
        
        /// <summary>
        /// Get performance metrics summary
        /// </summary>
        public async Task<PerformanceMetricsSummary> GetPerformanceMetricsAsync()
        {
            return await _metricsCollector.GetMetricsSummaryAsync();
        }
        
        /// <summary>
        /// Get customer success metrics
        /// </summary>
        public async Task<CustomerSuccessMetrics> GetCustomerSuccessMetricsAsync()
        {
            return await _customerSuccessMonitor.GetMetricsAsync();
        }
        
        /// <summary>
        /// Get security monitoring report
        /// </summary>
        public async Task<SecurityMonitoringReport> GetSecurityReportAsync()
        {
            return await _securityMonitor.GetReportAsync();
        }
        
        /// <summary>
        /// Get compliance monitoring report
        /// </summary>
        public async Task<ComplianceReport> GetComplianceReportAsync()
        {
            return await _complianceMonitor.GetReportAsync();
        }
        
        /// <summary>
        /// Export comprehensive monitoring report
        /// </summary>
        public async Task<string> ExportMonitoringReportAsync(MonitoringReportType reportType = MonitoringReportType.Full)
        {
            var report = new StringBuilder();
            var timestamp = DateTime.UtcNow;
            
            report.AppendLine("=== M&A Discovery Suite Enterprise Monitoring Report ===");
            report.AppendLine($"Customer: {_config.CustomerName}");
            report.AppendLine($"Environment: {_config.EnvironmentName}");
            report.AppendLine($"Generated: {timestamp:yyyy-MM-dd HH:mm:ss} UTC");
            report.AppendLine();
            
            // System Health Summary
            if (reportType.HasFlag(MonitoringReportType.SystemHealth))
            {
                report.AppendLine("=== SYSTEM HEALTH SUMMARY ===");
                var systemHealth = GetSystemHealth();
                report.AppendLine($"Overall Status: {systemHealth.OverallStatus}");
                report.AppendLine($"Critical Issues: {systemHealth.CriticalIssueCount}");
                report.AppendLine($"Warning Issues: {systemHealth.WarningIssueCount}");
                report.AppendLine();
                
                foreach (var healthCheck in systemHealth.HealthChecks)
                {
                    report.AppendLine($"  {healthCheck.CheckName}: {healthCheck.Status}");
                    if (!string.IsNullOrEmpty(healthCheck.Message))
                    {
                        report.AppendLine($"    {healthCheck.Message}");
                    }
                }
                report.AppendLine();
            }
            
            // Performance Metrics
            if (reportType.HasFlag(MonitoringReportType.Performance))
            {
                report.AppendLine("=== PERFORMANCE METRICS ===");
                var performanceMetrics = await GetPerformanceMetricsAsync();
                report.AppendLine($"Average Response Time: {performanceMetrics.AverageResponseTimeMs:F2}ms");
                report.AppendLine($"Throughput: {performanceMetrics.ThroughputPerSecond:F2} operations/second");
                report.AppendLine($"Error Rate: {performanceMetrics.ErrorRatePercent:F2}%");
                report.AppendLine($"Memory Usage: {performanceMetrics.MemoryUsageMB:F2}MB");
                report.AppendLine($"CPU Usage: {performanceMetrics.CpuUsagePercent:F2}%");
                report.AppendLine();
            }
            
            // Customer Success Metrics
            if (reportType.HasFlag(MonitoringReportType.CustomerSuccess))
            {
                report.AppendLine("=== CUSTOMER SUCCESS METRICS ===");
                var customerMetrics = await GetCustomerSuccessMetricsAsync();
                report.AppendLine($"Migration Success Rate: {customerMetrics.MigrationSuccessRate:F2}%");
                report.AppendLine($"User Adoption Rate: {customerMetrics.UserAdoptionRate:F2}%");
                report.AppendLine($"Customer Health Score: {customerMetrics.HealthScore:F1}/10");
                report.AppendLine($"Support Tickets (Open): {customerMetrics.OpenTicketCount}");
                report.AppendLine($"Average Resolution Time: {customerMetrics.AverageResolutionTimeHours:F1} hours");
                report.AppendLine();
            }
            
            // Security Report
            if (reportType.HasFlag(MonitoringReportType.Security))
            {
                report.AppendLine("=== SECURITY MONITORING ===");
                var securityReport = await GetSecurityReportAsync();
                report.AppendLine($"Security Events (24h): {securityReport.SecurityEventsLast24Hours}");
                report.AppendLine($"Failed Authentication Attempts: {securityReport.FailedAuthenticationAttempts}");
                report.AppendLine($"Suspicious Activities Detected: {securityReport.SuspiciousActivitiesCount}");
                report.AppendLine($"Last Security Scan: {securityReport.LastSecurityScan:yyyy-MM-dd HH:mm:ss}");
                report.AppendLine();
            }
            
            // Compliance Report
            if (reportType.HasFlag(MonitoringReportType.Compliance))
            {
                report.AppendLine("=== COMPLIANCE MONITORING ===");
                var complianceReport = await GetComplianceReportAsync();
                report.AppendLine($"SOX Compliance: {(complianceReport.SoxCompliant ? "COMPLIANT" : "NON-COMPLIANT")}");
                report.AppendLine($"GDPR Compliance: {(complianceReport.GdprCompliant ? "COMPLIANT" : "NON-COMPLIANT")}");
                report.AppendLine($"HIPAA Compliance: {(complianceReport.HipaaCompliant ? "COMPLIANT" : "NON-COMPLIANT")}");
                report.AppendLine($"Audit Trail Integrity: {(complianceReport.AuditTrailIntegrity ? "VERIFIED" : "COMPROMISED")}");
                report.AppendLine($"Data Retention Policy: {(complianceReport.DataRetentionCompliant ? "COMPLIANT" : "NON-COMPLIANT")}");
                report.AppendLine();
            }
            
            report.AppendLine("=== END OF REPORT ===");
            
            return report.ToString();
        }
        
        #endregion
        
        #region Helper Methods
        
        private void UpdateOverallSystemHealth()
        {
            // This method would update the overall system health status
            // and potentially trigger escalations if needed
        }
        
        private async Task<bool> TestDatabaseConnection()
        {
            // Implement database connectivity test
            // This would vary based on your database technology (SQL Server, PostgreSQL, etc.)
            await Task.Delay(100); // Simulate test
            return true;
        }
        
        private async Task<bool> TestPowerShellModule(string moduleName)
        {
            // Test if PowerShell module can be loaded and basic functions work
            try
            {
                using var powerShell = System.Management.Automation.PowerShell.Create();
                powerShell.AddScript($"Import-Module {moduleName} -Force; Get-Command -Module {moduleName} | Measure-Object | Select-Object -ExpandProperty Count");
                var result = await Task.Run(() => powerShell.Invoke());
                return result.Any() && !powerShell.HadErrors;
            }
            catch
            {
                return false;
            }
        }
        
        private async Task<bool> TestHttpConnectivity(string endpoint)
        {
            try
            {
                using var client = new HttpClient();
                client.Timeout = TimeSpan.FromSeconds(10);
                var response = await client.GetAsync(endpoint);
                return response.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }
        
        private async Task<double> GetProcessCpuUsage(int processId)
        {
            // Implement CPU usage calculation for specific process
            await Task.Delay(50);
            return new Random().NextDouble() * 100; // Placeholder
        }
        
        private async Task<double> GetSystemCpuUsage()
        {
            try
            {
                using var searcher = new ManagementObjectSearcher("select * from Win32_Processor");
                var cpuTimes = searcher.Get()
                    .Cast<ManagementObject>()
                    .Select(mo => (ulong)mo["LoadPercentage"])
                    .ToArray();
                
                return cpuTimes.Length > 0 ? cpuTimes.Average() : 0;
            }
            catch
            {
                return 0;
            }
        }
        
        private async Task<SystemMemoryInfo> GetSystemMemoryInfo()
        {
            try
            {
                using var searcher = new ManagementObjectSearcher("SELECT TotalPhysicalMemory FROM Win32_ComputerSystem");
                var totalMemory = searcher.Get().Cast<ManagementObject>()
                    .Select(mo => (ulong)mo["TotalPhysicalMemory"]).FirstOrDefault();
                
                using var availableSearcher = new ManagementObjectSearcher("SELECT AvailableBytes FROM Win32_PerfRawData_PerfOS_Memory");
                var availableMemory = availableSearcher.Get().Cast<ManagementObject>()
                    .Select(mo => (ulong)mo["AvailableBytes"]).FirstOrDefault();
                
                return new SystemMemoryInfo
                {
                    TotalMemory = totalMemory,
                    AvailableMemory = availableMemory
                };
            }
            catch
            {
                return new SystemMemoryInfo();
            }
        }
        
        private async Task<double> GetDiskIoUsage()
        {
            // Implement disk I/O usage calculation
            await Task.Delay(50);
            return new Random().NextDouble() * 100; // Placeholder
        }
        
        private async Task<LicenseInfo> GetLicenseInformation()
        {
            // Implement license validation logic
            return new LicenseInfo
            {
                IsValid = true,
                CustomerName = _config.CustomerName,
                ExpirationDate = DateTime.UtcNow.AddYears(1)
            };
        }
        
        private async Task StoreAlertForReporting(AlertEvent alertEvent)
        {
            // Store alert in database or file for reporting purposes
            var alertJson = JsonSerializer.Serialize(alertEvent);
            var logPath = Path.Combine(_config.AlertLogPath, $"alerts_{DateTime.UtcNow:yyyyMMdd}.json");
            
            try
            {
                Directory.CreateDirectory(Path.GetDirectoryName(logPath));
                await File.AppendAllTextAsync(logPath, alertJson + Environment.NewLine);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error storing alert for reporting");
            }
        }
        
        #endregion
        
        public void Dispose()
        {
            if (!_isDisposed)
            {
                _isDisposed = true;
                
                _cancellationTokenSource?.Cancel();
                _healthCheckTimer?.Dispose();
                _metricsCollectionTimer?.Dispose();
                
                _metricsCollector?.Dispose();
                _securityMonitor?.Dispose();
                _complianceMonitor?.Dispose();
                _customerSuccessMonitor?.Dispose();
                
                foreach (var channel in _alertChannels)
                {
                    channel?.Dispose();
                }
                
                _cancellationTokenSource?.Dispose();
                
                _logger?.LogInformation("Enterprise monitoring service disposed");
            }
        }
    }
}