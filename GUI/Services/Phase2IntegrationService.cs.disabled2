using System;
using System.Threading.Tasks;
using System.Windows;
using MandADiscoverySuite.Models;
using MandADiscoverySuite.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace MandADiscoverySuite.Services
{
    /// <summary>
    /// Phase 2 integration service that coordinates PowerShell integration with existing UI
    /// Provides seamless transition from data generators to live PowerShell execution
    /// </summary>
    public class Phase2IntegrationService : IDisposable
    {
        private readonly ILogger<Phase2IntegrationService> _logger;
        private readonly StructuredLoggingService _structuredLogger;
        private readonly IServiceProvider _serviceProvider;
        
        // Core Phase 2 services
        public PowerShellExecutionService ExecutionService { get; private set; }
        public MigrationStateManager StateManager { get; private set; }
        public PowerShellProgressBridge ProgressBridge { get; private set; }
        public EnhancedMigrationCommands MigrationCommands { get; private set; }
        public PowerShellIntegrationTestFramework TestFramework { get; private set; }

        // Integration state
        public bool IsPhase2Enabled { get; private set; }
        public DateTime? Phase2ActivationTime { get; private set; }

        private bool _disposed = false;

        public Phase2IntegrationService(ILogger<Phase2IntegrationService> logger, IServiceProvider serviceProvider)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
            _structuredLogger = StructuredLoggingService.Instance;

            _structuredLogger?.LogInfo("Phase2IntegrationService",
                new { action = "service_init" },
                "Phase 2 integration service initialized");
        }

        #region Phase 2 Activation

        /// <summary>
        /// Activates Phase 2 PowerShell integration
        /// </summary>
        public async Task<bool> ActivatePhase2Async()
        {
            try
            {
                if (IsPhase2Enabled)
                {
                    _logger?.LogWarning("Phase 2 is already activated");
                    return true;
                }

                _structuredLogger?.LogInfo("Phase2IntegrationService",
                    new { action = "phase2_activation_start" },
                    "Starting Phase 2 activation");

                // Initialize core services
                await InitializeCoreServicesAsync();

                // Validate PowerShell environment
                var validationResult = await ValidatePowerShellEnvironmentAsync();
                if (!validationResult.IsValid)
                {
                    throw new InvalidOperationException($"PowerShell environment validation failed: {validationResult.ErrorMessage}");
                }

                // Run integration tests
                var testResult = await RunActivationTestsAsync();
                if (!testResult.Success)
                {
                    throw new InvalidOperationException($"Phase 2 activation tests failed: {testResult.ErrorMessage}");
                }

                // Activate Phase 2
                IsPhase2Enabled = true;
                Phase2ActivationTime = DateTime.Now;

                _structuredLogger?.LogInfo("Phase2IntegrationService",
                    new { action = "phase2_activated", activation_time = Phase2ActivationTime },
                    "Phase 2 PowerShell integration activated successfully");

                return true;
            }
            catch (Exception ex)
            {
                _structuredLogger?.LogError("Phase2IntegrationService", ex,
                    new { action = "phase2_activation_failed" },
                    "Failed to activate Phase 2");

                // Cleanup on failure
                await DeactivatePhase2Async();
                throw;
            }
        }

        /// <summary>
        /// Deactivates Phase 2 and returns to simulation mode
        /// </summary>
        public async Task<bool> DeactivatePhase2Async()
        {
            try
            {
                if (!IsPhase2Enabled)
                {
                    return true;
                }

                _structuredLogger?.LogInfo("Phase2IntegrationService",
                    new { action = "phase2_deactivation_start" },
                    "Starting Phase 2 deactivation");

                // Dispose services in reverse order
                TestFramework?.Dispose();
                MigrationCommands?.Dispose();
                ProgressBridge?.Dispose();
                StateManager?.Dispose();
                ExecutionService?.Dispose();

                // Clear references
                TestFramework = null;
                MigrationCommands = null;
                ProgressBridge = null;
                StateManager = null;
                ExecutionService = null;

                IsPhase2Enabled = false;
                Phase2ActivationTime = null;

                _structuredLogger?.LogInfo("Phase2IntegrationService",
                    new { action = "phase2_deactivated" },
                    "Phase 2 deactivated, returned to simulation mode");

                return true;
            }
            catch (Exception ex)
            {
                _structuredLogger?.LogError("Phase2IntegrationService", ex,
                    new { action = "phase2_deactivation_failed" },
                    "Failed to deactivate Phase 2");

                return false;
            }
        }

        #endregion

        #region Service Initialization

        /// <summary>
        /// Initializes core Phase 2 services
        /// </summary>
        private async Task InitializeCoreServicesAsync()
        {
            // Create loggers for each service
            var executionLogger = _serviceProvider.GetService<ILogger<PowerShellExecutionService>>();
            var stateLogger = _serviceProvider.GetService<ILogger<MigrationStateManager>>();
            var bridgeLogger = _serviceProvider.GetService<ILogger<PowerShellProgressBridge>>();
            var commandsLogger = _serviceProvider.GetService<ILogger<EnhancedMigrationCommands>>();
            var testLogger = _serviceProvider.GetService<ILogger<PowerShellIntegrationTestFramework>>();

            // Initialize services in dependency order
            ExecutionService = new PowerShellExecutionService(executionLogger);
            StateManager = new MigrationStateManager(stateLogger);
            ProgressBridge = new PowerShellProgressBridge(bridgeLogger, ExecutionService, StateManager);
            MigrationCommands = new EnhancedMigrationCommands(commandsLogger, ExecutionService, StateManager);
            TestFramework = new PowerShellIntegrationTestFramework(testLogger, ExecutionService, StateManager, ProgressBridge, MigrationCommands);

            _structuredLogger?.LogInfo("Phase2IntegrationService",
                new { action = "services_initialized" },
                "All Phase 2 services initialized successfully");

            await Task.CompletedTask;
        }

        #endregion

        #region Environment Validation

        /// <summary>
        /// Validates PowerShell environment for Phase 2 operation
        /// </summary>
        private async Task<Phase2ValidationResult> ValidatePowerShellEnvironmentAsync()
        {
            try
            {
                var result = new Phase2ValidationResult { IsValid = true };

                // Check PowerShell version
                var psVersionCheck = await ValidatePowerShellVersionAsync();
                if (!psVersionCheck.IsValid)
                {
                    result.IsValid = false;
                    result.ErrorMessage = psVersionCheck.ErrorMessage;
                    return result;
                }

                // Check enterprise discovery modules
                var modulesCheck = await ValidateEnterpriseModulesAsync();
                if (!modulesCheck.IsValid)
                {
                    result.IsValid = false;
                    result.ErrorMessage = modulesCheck.ErrorMessage;
                    return result;
                }

                // Check permissions
                var permissionsCheck = await ValidatePermissionsAsync();
                if (!permissionsCheck.IsValid)
                {
                    result.IsValid = false;
                    result.ErrorMessage = permissionsCheck.ErrorMessage;
                    return result;
                }

                _structuredLogger?.LogInfo("Phase2IntegrationService",
                    new { action = "environment_validated" },
                    "PowerShell environment validation passed");

                return result;
            }
            catch (Exception ex)
            {
                return new Phase2ValidationResult
                {
                    IsValid = false,
                    ErrorMessage = $"Environment validation failed: {ex.Message}"
                };
            }
        }

        /// <summary>
        /// Validates PowerShell version
        /// </summary>
        private async Task<Phase2ValidationResult> ValidatePowerShellVersionAsync()
        {
            try
            {
                // This would run a PowerShell command to check version
                // For now, assume validation passes
                await Task.Delay(100);

                return new Phase2ValidationResult { IsValid = true };
            }
            catch (Exception ex)
            {
                return new Phase2ValidationResult
                {
                    IsValid = false,
                    ErrorMessage = $"PowerShell version check failed: {ex.Message}"
                };
            }
        }

        /// <summary>
        /// Validates enterprise discovery modules are available
        /// </summary>
        private async Task<Phase2ValidationResult> ValidateEnterpriseModulesAsync()
        {
            try
            {
                // Check if enterprise discovery path exists
                var enterprisePath = @"C:\enterprisediscovery";
                if (!System.IO.Directory.Exists(enterprisePath))
                {
                    return new Phase2ValidationResult
                    {
                        IsValid = false,
                        ErrorMessage = $"Enterprise discovery path not found: {enterprisePath}"
                    };
                }

                // Check for module launcher
                var launcherPath = @"C:\enterprisediscovery\Scripts\DiscoveryModuleLauncher.ps1";
                if (!System.IO.File.Exists(launcherPath))
                {
                    return new Phase2ValidationResult
                    {
                        IsValid = false,
                        ErrorMessage = $"Module launcher not found: {launcherPath}"
                    };
                }

                await Task.Delay(100);
                return new Phase2ValidationResult { IsValid = true };
            }
            catch (Exception ex)
            {
                return new Phase2ValidationResult
                {
                    IsValid = false,
                    ErrorMessage = $"Enterprise modules validation failed: {ex.Message}"
                };
            }
        }

        /// <summary>
        /// Validates permissions for PowerShell execution
        /// </summary>
        private async Task<Phase2ValidationResult> ValidatePermissionsAsync()
        {
            try
            {
                // This would check execution policy and permissions
                // For now, assume validation passes
                await Task.Delay(100);

                return new Phase2ValidationResult { IsValid = true };
            }
            catch (Exception ex)
            {
                return new Phase2ValidationResult
                {
                    IsValid = false,
                    ErrorMessage = $"Permissions validation failed: {ex.Message}"
                };
            }
        }

        #endregion

        #region Activation Tests

        /// <summary>
        /// Runs activation tests to ensure Phase 2 is ready
        /// </summary>
        private async Task<TestResult> RunActivationTestsAsync()
        {
            try
            {
                _structuredLogger?.LogInfo("Phase2IntegrationService",
                    new { action = "activation_tests_start" },
                    "Running Phase 2 activation tests");

                // Run minimal test suite
                var suiteResult = await TestFramework.RunIntegrationTestSuiteAsync();

                // Consider activation successful if most tests pass
                var successThreshold = 0.7; // 70% of tests must pass
                var successRate = (double)suiteResult.PassedTests / suiteResult.TotalTests;

                var success = successRate >= successThreshold;

                _structuredLogger?.LogInfo("Phase2IntegrationService",
                    new { action = "activation_tests_complete", success_rate = successRate, threshold = successThreshold },
                    $"Activation tests completed: {suiteResult.PassedTests}/{suiteResult.TotalTests} passed");

                return new TestResult
                {
                    TestId = "ActivationTests",
                    TestName = "Phase 2 Activation Tests",
                    Success = success,
                    Duration = suiteResult.Duration,
                    ErrorMessage = success ? null : $"Insufficient tests passed: {successRate:P} < {successThreshold:P}",
                    Details = $"Passed: {suiteResult.PassedTests}/{suiteResult.TotalTests}, Success rate: {successRate:P}"
                };
            }
            catch (Exception ex)
            {
                return new TestResult
                {
                    TestId = "ActivationTests",
                    TestName = "Phase 2 Activation Tests",
                    Success = false,
                    ErrorMessage = ex.Message
                };
            }
        }

        #endregion

        #region Integration Helpers

        /// <summary>
        /// Creates a Phase 2 enhanced MigrateViewModel that uses PowerShell instead of generators
        /// </summary>
        public EnhancedMigrateViewModel CreateEnhancedMigrateViewModel(ILogger<MigrateViewModel> logger)
        {
            if (!IsPhase2Enabled)
            {
                throw new InvalidOperationException("Phase 2 must be activated before creating enhanced ViewModels");
            }

            return new EnhancedMigrateViewModel(logger, this);
        }

        /// <summary>
        /// Gets Phase 2 status information
        /// </summary>
        public Phase2Status GetPhase2Status()
        {
            return new Phase2Status
            {
                IsEnabled = IsPhase2Enabled,
                ActivationTime = Phase2ActivationTime,
                ActiveExecutions = ExecutionService?.GetAllActiveProgress()?.Count ?? 0,
                TotalExecutions = StateManager?.GetMigrationHistory(1000)?.Count ?? 0,
                LastError = null // Could track last error here
            };
        }

        #endregion

        #region Disposal

        public void Dispose()
        {
            if (!_disposed)
            {
                DeactivatePhase2Async().Wait(TimeSpan.FromSeconds(10));
                _disposed = true;
            }
        }

        #endregion
    }

    #region Supporting Classes

    /// <summary>
    /// Environment validation result for Phase 2
    /// </summary>
    public class Phase2ValidationResult
    {
        public bool IsValid { get; set; }
        public string ErrorMessage { get; set; }
    }

    /// <summary>
    /// Phase 2 status information
    /// </summary>
    public class Phase2Status
    {
        public bool IsEnabled { get; set; }
        public DateTime? ActivationTime { get; set; }
        public int ActiveExecutions { get; set; }
        public int TotalExecutions { get; set; }
        public string LastError { get; set; }
    }

    /// <summary>
    /// Enhanced MigrateViewModel that uses Phase 2 PowerShell integration
    /// This demonstrates how to extend the existing ViewModel with PowerShell capabilities
    /// </summary>
    public class EnhancedMigrateViewModel : MigrateViewModel
    {
        private readonly Phase2IntegrationService _phase2Service;

        public EnhancedMigrateViewModel(ILogger<MigrateViewModel> logger, Phase2IntegrationService phase2Service) 
            : base(logger)
        {
            _phase2Service = phase2Service ?? throw new ArgumentNullException(nameof(phase2Service));

            // Subscribe to Phase 2 events for real-time updates
            if (_phase2Service.ProgressBridge != null)
            {
                _phase2Service.ProgressBridge.DashboardMetricsUpdated += OnPhase2DashboardUpdated;
                _phase2Service.ProgressBridge.DiscoveryMetricsUpdated += OnPhase2DiscoveryUpdated;
                _phase2Service.ProgressBridge.ExecutionMetricsUpdated += OnPhase2ExecutionUpdated;
                _phase2Service.ProgressBridge.ValidationMetricsUpdated += OnPhase2ValidationUpdated;
            }

            // Stop the existing real-time data generation timers
            StopRealTimeUpdates();

            StructuredLogger?.LogInfo(LogSourceName,
                new { action = "enhanced_viewmodel_init" },
                "Enhanced MigrateViewModel with Phase 2 integration initialized");
        }

        /// <summary>
        /// Override discovery command to use PowerShell instead of simulation
        /// </summary>
        protected async Task StartDiscoveryAsync()
        {
            try
            {
                StructuredLogger?.LogInfo(LogSourceName, new { action = "phase2_discovery_start" }, "Starting Phase 2 discovery");

                SetLoadingState(true);
                LoadingMessage = "Starting PowerShell discovery modules...";

                // Use Phase 2 PowerShell execution instead of simulation
                var command = _phase2Service.MigrationCommands.CreateBatchDiscoveryCommand(
                    new List<string> { "UsersDiscovery", "GroupsDiscovery", "InfrastructureDiscovery" },
                    "DefaultCompany");

                await command.ExecuteAsync(null);

                StructuredLogger?.LogInfo(LogSourceName, new { action = "phase2_discovery_complete" }, "Phase 2 discovery completed");
            }
            catch (Exception ex)
            {
                StructuredLogger?.LogError(LogSourceName, ex, new { action = "phase2_discovery_fail" }, "Phase 2 discovery failed");
                SetErrorStateSafe($"Discovery failed: {ex.Message}");
            }
            finally
            {
                SetLoadingState(false);
            }
        }

        #region Phase 2 Event Handlers

        private void OnPhase2DashboardUpdated(object sender, DashboardMetricsUpdatedEventArgs e)
        {
            // Update UI with real metrics from PowerShell execution
            Application.Current?.Dispatcher.BeginInvoke(() =>
            {
                Metrics = e.Metrics;
            });
        }

        private void OnPhase2DiscoveryUpdated(object sender, DiscoveryMetricsUpdatedEventArgs e)
        {
            Application.Current?.Dispatcher.BeginInvoke(() =>
            {
                DiscoveryMetrics = e.Metrics;
            });
        }

        private void OnPhase2ExecutionUpdated(object sender, ExecutionMetricsUpdatedEventArgs e)
        {
            Application.Current?.Dispatcher.BeginInvoke(() =>
            {
                ExecutionMetrics = e.Metrics;
            });
        }

        private void OnPhase2ValidationUpdated(object sender, ValidationMetricsUpdatedEventArgs e)
        {
            Application.Current?.Dispatcher.BeginInvoke(() =>
            {
                ValidationMetrics = e.Metrics;
            });
        }

        #endregion

        protected override void Dispose(bool disposing)
        {
            if (disposing && _phase2Service?.ProgressBridge != null)
            {
                _phase2Service.ProgressBridge.DashboardMetricsUpdated -= OnPhase2DashboardUpdated;
                _phase2Service.ProgressBridge.DiscoveryMetricsUpdated -= OnPhase2DiscoveryUpdated;
                _phase2Service.ProgressBridge.ExecutionMetricsUpdated -= OnPhase2ExecutionUpdated;
                _phase2Service.ProgressBridge.ValidationMetricsUpdated -= OnPhase2ValidationUpdated;
            }

            base.Dispose(disposing);
        }
    }

    #endregion
}